[{"path":[]},{"path":"https://anespinosa.github.io/netmem/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://anespinosa.github.io/netmem/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://anespinosa.github.io/netmem/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://anespinosa.github.io/netmem/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://anespinosa.github.io/netmem/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://anespinosa.github.io/netmem/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://anespinosa.github.io/netmem/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://anespinosa.github.io/netmem/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://anespinosa.github.io/netmem/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://anespinosa.github.io/netmem/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://anespinosa.github.io/netmem/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://anespinosa.github.io/netmem/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 LICENCE.md  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. netmem Copyright (C) 2020 LICENCE.md This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://anespinosa.github.io/netmem/articles/multilayer.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"multilayer","text":"can install development version github/anespinosa:","code":"# install.packages(\"devtools\") devtools::install_github(\"anespinosa/netmem\") library(netmem)"},{"path":"https://anespinosa.github.io/netmem/articles/multilayer.html","id":"multilayers","dir":"Articles","previous_headings":"Installation","what":"Multilayers","title":"multilayer","text":"Multilayer networks framework considers complex patterns relationships /different nodes. However, social network sociological perspective, different types multilayer structures often referred multiplex networks (multi-relational), multilevel networks, network networks Kivelä et al. (2014), two-mode networks, among others. Furthermore, matrix perspective, ‘backbone’ complex structures mainly represented comfortable combination different types matrices. primary matrix used social network analysis adjacency matrix sociomatrix incidence matrix.","code":""},{"path":"https://anespinosa.github.io/netmem/articles/multilayer.html","id":"two-mode-networks","dir":"Articles","previous_headings":"Installation","what":"Two-mode networks","title":"multilayer","text":"different ways referring incidence matrices. social network perspective often considered affiliation network, consist set binary relationships members two sets items (.e., “member ” “participant ” “”) (Borgatti Halgin, 2011). general, networks bipartite property two classes ties occur classes never within classes. example, section use classical example Southern Woman extracted R package classicnets: common practice, incidence matrix often converted adjacent matrices. given matrix product AATAA^T ATAA^TA, AA incidence matrix matrix ATA^T transpose AA. relationship matrices context social networks explored Breiger (1974). Another concept often used bipartite network, means graph’s nodes can partitioned two classes. cases, classes can different entities (e.g., actors participating activities belonging clubs), assumption always clear. example, dichotomic attributes ascribed characteristics also bipartite property. approach devised specifically affiliation data, provided Bonacich (1972): difference affiliation networks bipartite networks allowed us avoid confounding concept social proximity (e.g., part laboratory) social similarity (e.g., ascribed gender) (Rivera et al., 2010). addition, distinction important mechanisms often considered competing alternatives understanding social relationships. Two-mode networks broader concept emphasizes difference entities different levels. Therefore, entities likewise differentiated rows columns incidence matrix. researchers differentiate informational socio-cognitive dimensions social networks concrete relations - proxies - agents (Leydesdorff, 2008). example, informational socio-cognitive networks can incidence matrix actors survey’s items, citation networks tweet message. Therefore, incidence matrix socio-cognitive networks often called occurrence networks. example, scientometric, information often explored using co-occurrence overlapping ties:","code":"A <- matrix(   c(     1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0,     1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,     0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,     1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,     0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,     0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0,     0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0,     0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1,     0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1,     0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,     0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0,     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0   ),   byrow = TRUE, ncol = 14 ) matrix_projection(A) #> $matrix1 #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    3    2    3    2    3    3    2    3    1     0     0     0     0 #>  [2,]    2    3    3    2    3    3    2    3    2     0     0     0     0 #>  [3,]    3    3    6    4    6    5    4    5    2     0     0     0     0 #>  [4,]    2    2    4    4    4    3    3    3    2     0     0     0     0 #>  [5,]    3    3    6    4    8    6    6    7    3     0     0     0     0 #>  [6,]    3    3    5    3    6    8    5    7    4     1     1     1     1 #>  [7,]    2    2    4    3    6    5   10    8    5     3     2     4     2 #>  [8,]    3    3    5    3    7    7    8   14    9     4     1     5     2 #>  [9,]    1    2    2    2    3    4    5    9   12     4     3     5     3 #> [10,]    0    0    0    0    0    1    3    4    4     5     2     5     3 #> [11,]    0    0    0    0    0    1    2    1    3     2     4     2     1 #> [12,]    0    0    0    0    0    1    4    5    5     5     2     6     3 #> [13,]    0    0    0    0    0    1    2    2    3     3     1     3     3 #> [14,]    0    0    0    0    0    1    2    2    3     3     1     3     3 #>       [,14] #>  [1,]     0 #>  [2,]     0 #>  [3,]     0 #>  [4,]     0 #>  [5,]     0 #>  [6,]     1 #>  [7,]     2 #>  [8,]     2 #>  [9,]     3 #> [10,]     3 #> [11,]     1 #> [12,]     3 #> [13,]     3 #> [14,]     3 #>  #> $matrix2 #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    8    6    7    6    3    4    3    3    3     2     2     2     2 #>  [2,]    6    7    6    6    3    4    4    2    3     2     1     1     2 #>  [3,]    7    6    8    6    4    4    4    3    4     3     2     2     3 #>  [4,]    6    6    6    7    4    4    4    2    3     2     1     1     2 #>  [5,]    3    3    4    4    4    2    2    0    2     1     0     0     1 #>  [6,]    4    4    4    4    2    4    3    2    2     1     1     1     1 #>  [7,]    3    4    4    4    2    3    4    2    3     2     1     1     2 #>  [8,]    3    2    3    2    0    2    2    3    2     2     2     2     2 #>  [9,]    3    3    4    3    2    2    3    2    4     3     2     2     3 #> [10,]    2    2    3    2    1    1    2    2    3     4     3     3     4 #> [11,]    2    1    2    1    0    1    1    2    2     3     4     4     4 #> [12,]    2    1    2    1    0    1    1    2    2     3     4     6     6 #> [13,]    2    2    3    2    1    1    2    2    3     4     4     6     7 #> [14,]    2    2    3    2    1    1    2    2    2     3     3     5     6 #> [15,]    1    2    2    2    1    1    2    1    2     3     3     3     4 #> [16,]    2    1    2    1    0    1    1    2    2     2     2     2     2 #> [17,]    1    0    1    0    0    0    0    1    1     1     1     1     1 #> [18,]    1    0    1    0    0    0    0    1    1     1     1     1     1 #>       [,14] [,15] [,16] [,17] [,18] #>  [1,]     2     1     2     1     1 #>  [2,]     2     2     1     0     0 #>  [3,]     3     2     2     1     1 #>  [4,]     2     2     1     0     0 #>  [5,]     1     1     0     0     0 #>  [6,]     1     1     1     0     0 #>  [7,]     2     2     1     0     0 #>  [8,]     2     1     2     1     1 #>  [9,]     2     2     2     1     1 #> [10,]     3     3     2     1     1 #> [11,]     3     3     2     1     1 #> [12,]     5     3     2     1     1 #> [13,]     6     4     2     1     1 #> [14,]     8     4     1     2     2 #> [15,]     4     5     1     1     1 #> [16,]     1     1     2     1     1 #> [17,]     2     1     1     2     2 #> [18,]     2     1     1     2     2 bonacich_norm(A) #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,] 1.0000000 0.7947869 0.8554094 0.7947869 0.6339746 1.0000000 0.6339746 #>  [2,] 0.7947869 1.0000000 0.7947869 0.8571429 0.6796228 1.0000000 1.0000000 #>  [3,] 0.8554094 0.7947869 1.0000000 0.7947869 1.0000000 1.0000000 1.0000000 #>  [4,] 0.7947869 0.8571429 0.7947869 1.0000000 1.0000000 1.0000000 1.0000000 #>  [5,] 0.6339746 0.6796228 1.0000000 1.0000000 1.0000000 0.6666667 0.6666667 #>  [6,] 1.0000000 1.0000000 1.0000000 1.0000000 0.6666667 1.0000000 0.8386095 #>  [7,] 0.6339746 1.0000000 1.0000000 1.0000000 0.6666667 0.8386095 1.0000000 #>  [8,] 1.0000000 0.6077190 1.0000000 0.6077190 0.0000000 0.7500000 0.7500000 #>  [9,] 0.6339746 0.6796228 1.0000000 0.6796228 0.6666667 0.6666667 0.8386095 #> [10,] 0.4494897 0.5000000 0.6339746 0.5000000 0.4686270 0.4686270 0.6666667 #> [11,] 0.4494897 0.3203772 0.4494897 0.3203772 0.0000000 0.4686270 0.4686270 #> [12,] 0.2898979 0.2052131 0.2898979 0.2052131 0.0000000 0.3660254 0.3660254 #> [13,] 0.2052131 0.2857143 0.3538894 0.2857143 0.3203772 0.3203772 0.5000000 #> [14,] 0.0000000 0.2052131 0.2572843 0.2052131 0.2742919 0.2742919 0.4494897 #> [15,] 0.2108967 0.4220645 0.3660254 0.4220645 0.4142136 0.4142136 0.6043561 #> [16,] 1.0000000 0.5000000 1.0000000 0.5000000 0.0000000 0.6339746 0.6339746 #> [17,] 0.4580399 0.0000000 0.4580399 0.0000000 0.0000000 0.0000000 0.0000000 #> [18,] 0.4580399 0.0000000 0.4580399 0.0000000 0.0000000 0.0000000 0.0000000 #>            [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14] #>  [1,] 1.0000000 0.6339746 0.4494897 0.4494897 0.2898979 0.2052131 0.0000000 #>  [2,] 0.6077190 0.6796228 0.5000000 0.3203772 0.2052131 0.2857143 0.2052131 #>  [3,] 1.0000000 1.0000000 0.6339746 0.4494897 0.2898979 0.3538894 0.2572843 #>  [4,] 0.6077190 0.6796228 0.5000000 0.3203772 0.2052131 0.2857143 0.2052131 #>  [5,] 0.0000000 0.6666667 0.4686270 0.0000000 0.0000000 0.3203772 0.2742919 #>  [6,] 0.7500000 0.6666667 0.4686270 0.4686270 0.3660254 0.3203772 0.2742919 #>  [7,] 0.7500000 0.8386095 0.6666667 0.4686270 0.3660254 0.5000000 0.4494897 #>  [8,] 1.0000000 0.7500000 0.7500000 0.7500000 0.6516685 0.6077190 0.5635083 #>  [9,] 0.7500000 1.0000000 0.8386095 0.6666667 0.5505103 0.6796228 0.4494897 #> [10,] 0.7500000 0.8386095 1.0000000 0.8386095 0.7257081 1.0000000 0.6339746 #> [11,] 0.7500000 0.6666667 0.8386095 1.0000000 1.0000000 1.0000000 0.6339746 #> [12,] 0.6516685 0.5505103 0.7257081 1.0000000 1.0000000 1.0000000 0.7427157 #> [13,] 0.6077190 0.6796228 1.0000000 1.0000000 1.0000000 1.0000000 0.7947869 #> [14,] 0.5635083 0.4494897 0.6339746 0.6339746 0.7427157 0.7947869 1.0000000 #> [15,] 0.4833148 0.6043561 0.7759908 0.7759908 0.6339746 0.7387961 0.6909830 #> [16,] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.4580399 #> [17,] 0.6909830 0.6339746 0.6339746 0.6339746 0.5419601 0.5000000 1.0000000 #> [18,] 0.6909830 0.6339746 0.6339746 0.6339746 0.5419601 0.5000000 1.0000000 #>           [,15]     [,16]     [,17]     [,18] #>  [1,] 0.2108967 1.0000000 0.4580399 0.4580399 #>  [2,] 0.4220645 0.5000000 0.0000000 0.0000000 #>  [3,] 0.3660254 1.0000000 0.4580399 0.4580399 #>  [4,] 0.4220645 0.5000000 0.0000000 0.0000000 #>  [5,] 0.4142136 0.0000000 0.0000000 0.0000000 #>  [6,] 0.4142136 0.6339746 0.0000000 0.0000000 #>  [7,] 0.6043561 0.6339746 0.0000000 0.0000000 #>  [8,] 0.4833148 1.0000000 0.6909830 0.6909830 #>  [9,] 0.6043561 1.0000000 0.6339746 0.6339746 #> [10,] 0.7759908 1.0000000 0.6339746 0.6339746 #> [11,] 0.7759908 1.0000000 0.6339746 0.6339746 #> [12,] 0.6339746 1.0000000 0.5419601 0.5419601 #> [13,] 0.7387961 1.0000000 0.5000000 0.5000000 #> [14,] 0.6909830 0.4580399 1.0000000 1.0000000 #> [15,] 1.0000000 0.5857864 0.5857864 0.5857864 #> [16,] 0.5857864 1.0000000 0.7683375 0.7683375 #> [17,] 0.5857864 0.7683375 1.0000000 1.0000000 #> [18,] 0.5857864 0.7683375 1.0000000 1.0000000 minmax_overlap(A, row = TRUE, min = TRUE) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    8    6    7    6    3    4    3    3    3     2     2     2     2 #>  [2,]    6    7    6    6    3    4    4    2    3     2     1     1     2 #>  [3,]    7    6    8    6    4    4    4    3    4     3     2     2     3 #>  [4,]    6    6    6    7    4    4    4    2    3     2     1     1     2 #>  [5,]    3    3    4    4    4    2    2    0    2     1     0     0     1 #>  [6,]    4    4    4    4    2    4    3    2    2     1     1     1     1 #>  [7,]    3    4    4    4    2    3    4    2    3     2     1     1     2 #>  [8,]    3    2    3    2    0    2    2    3    2     2     2     2     2 #>  [9,]    3    3    4    3    2    2    3    2    4     3     2     2     3 #> [10,]    2    2    3    2    1    1    2    2    3     4     3     3     4 #> [11,]    2    1    2    1    0    1    1    2    2     3     4     4     4 #> [12,]    2    1    2    1    0    1    1    2    2     3     4     6     6 #> [13,]    2    2    3    2    1    1    2    2    3     4     4     6     7 #> [14,]    2    2    3    2    1    1    2    2    2     3     3     5     6 #> [15,]    1    2    2    2    1    1    2    1    2     3     3     3     4 #> [16,]    2    1    2    1    0    1    1    2    2     2     2     2     2 #> [17,]    1    0    1    0    0    0    0    1    1     1     1     1     1 #> [18,]    1    0    1    0    0    0    0    1    1     1     1     1     1 #>       [,14] [,15] [,16] [,17] [,18] #>  [1,]     2     1     2     1     1 #>  [2,]     2     2     1     0     0 #>  [3,]     3     2     2     1     1 #>  [4,]     2     2     1     0     0 #>  [5,]     1     1     0     0     0 #>  [6,]     1     1     1     0     0 #>  [7,]     2     2     1     0     0 #>  [8,]     2     1     2     1     1 #>  [9,]     2     2     2     1     1 #> [10,]     3     3     2     1     1 #> [11,]     3     3     2     1     1 #> [12,]     5     3     2     1     1 #> [13,]     6     4     2     1     1 #> [14,]     8     4     1     2     2 #> [15,]     4     5     1     1     1 #> [16,]     1     1     2     1     1 #> [17,]     2     1     1     2     2 #> [18,]     2     1     1     2     2 minmax_overlap(A, row = FALSE, min = TRUE) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    3    2    3    2    3    3    2    3    1     0     0     0     0 #>  [2,]    2    3    3    2    3    3    2    3    2     0     0     0     0 #>  [3,]    3    3    6    4    6    5    4    5    2     0     0     0     0 #>  [4,]    2    2    4    4    4    3    3    3    2     0     0     0     0 #>  [5,]    3    3    6    4    8    6    6    7    3     0     0     0     0 #>  [6,]    3    3    5    3    6    8    5    7    4     1     1     1     1 #>  [7,]    2    2    4    3    6    5   10    8    5     3     2     4     2 #>  [8,]    3    3    5    3    7    7    8   14    9     4     1     5     2 #>  [9,]    1    2    2    2    3    4    5    9   12     4     3     5     3 #> [10,]    0    0    0    0    0    1    3    4    4     5     2     5     3 #> [11,]    0    0    0    0    0    1    2    1    3     2     4     2     1 #> [12,]    0    0    0    0    0    1    4    5    5     5     2     6     3 #> [13,]    0    0    0    0    0    1    2    2    3     3     1     3     3 #> [14,]    0    0    0    0    0    1    2    2    3     3     1     3     3 #>       [,14] #>  [1,]     0 #>  [2,]     0 #>  [3,]     0 #>  [4,]     0 #>  [5,]     0 #>  [6,]     1 #>  [7,]     2 #>  [8,]     2 #>  [9,]     3 #> [10,]     3 #> [11,]     1 #> [12,]     3 #> [13,]     3 #> [14,]     3  co_ocurrence(A, similarity = c(\"ochiai\"), occurrence = TRUE, projection = FALSE) #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,] 1.0000000 0.6666667 0.7071068 0.5773503 0.6123724 0.6123724 0.3651484 #>  [2,] 0.6666667 1.0000000 0.7071068 0.5773503 0.6123724 0.6123724 0.3651484 #>  [3,] 0.7071068 0.7071068 1.0000000 0.8164966 0.8660254 0.7216878 0.5163978 #>  [4,] 0.5773503 0.5773503 0.8164966 1.0000000 0.7071068 0.5303301 0.4743416 #>  [5,] 0.6123724 0.6123724 0.8660254 0.7071068 1.0000000 0.7500000 0.6708204 #>  [6,] 0.6123724 0.6123724 0.7216878 0.5303301 0.7500000 1.0000000 0.5590170 #>  [7,] 0.3651484 0.3651484 0.5163978 0.4743416 0.6708204 0.5590170 1.0000000 #>  [8,] 0.4629100 0.4629100 0.5455447 0.4008919 0.6614378 0.6614378 0.6761234 #>  [9,] 0.1666667 0.3333333 0.2357023 0.2886751 0.3061862 0.4082483 0.4564355 #> [10,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.1581139 0.4242641 #> [11,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.1767767 0.3162278 #> [12,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.1443376 0.5163978 #> [13,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.2041241 0.3651484 #> [14,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.2041241 0.3651484 #>            [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14] #>  [1,] 0.4629100 0.1666667 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [2,] 0.4629100 0.3333333 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [3,] 0.5455447 0.2357023 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [4,] 0.4008919 0.2886751 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [5,] 0.6614378 0.3061862 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [6,] 0.6614378 0.4082483 0.1581139 0.1767767 0.1443376 0.2041241 0.2041241 #>  [7,] 0.6761234 0.4564355 0.4242641 0.3162278 0.5163978 0.3651484 0.3651484 #>  [8,] 1.0000000 0.6943651 0.4780914 0.1336306 0.5455447 0.3086067 0.3086067 #>  [9,] 0.6943651 1.0000000 0.5163978 0.4330127 0.5892557 0.5000000 0.5000000 #> [10,] 0.4780914 0.5163978 1.0000000 0.4472136 0.9128709 0.7745967 0.7745967 #> [11,] 0.1336306 0.4330127 0.4472136 1.0000000 0.4082483 0.2886751 0.2886751 #> [12,] 0.5455447 0.5892557 0.9128709 0.4082483 1.0000000 0.7071068 0.7071068 #> [13,] 0.3086067 0.5000000 0.7745967 0.2886751 0.7071068 1.0000000 1.0000000 #> [14,] 0.3086067 0.5000000 0.7745967 0.2886751 0.7071068 1.0000000 1.0000000"},{"path":"https://anespinosa.github.io/netmem/articles/multilayer.html","id":"multilevel-networks","dir":"Articles","previous_headings":"","what":"Multilevel Networks","title":"multilayer","text":"Connections individuals often embedded complex structures, shape actors’ expectations, behaviours outcomes time. structures can interdependent exist different levels. Multilevel networks means can represent complex system using nodes edges different types (Lazega Snijders, 2016, Knoke et ., 2021. multilevel structures, tend collect data different matrices representing variation ties within levels. Often, describe connection actors adjacency matrix relations levels incidence matrices. comfortable combination matrices common structure represent multilevel network highly complex.","code":""},{"path":"https://anespinosa.github.io/netmem/articles/multilayer.html","id":"example","dir":"Articles","previous_headings":"Multilevel Networks","what":"Example","title":"multilayer","text":"Let’s assume multilevel network two adjacency matrices, one valued matrix two incidence matrices . A1: Adjacency Matrix level 1 B1: incidence Matrix level 1 level 2 A2: Adjacency Matrix level 2 B2: incidence Matrix level 2 level 3 A3: Valued Matrix level 3 Create data start report matrices:","code":"A1 <- matrix(c(   0, 1, 0, 0, 1,   1, 0, 0, 1, 1,   0, 0, 0, 1, 1,   0, 1, 1, 0, 1,   1, 1, 1, 1, 0 ), byrow = TRUE, ncol = 5)  B1 <- matrix(c(   1, 0, 0,   1, 1, 0,   0, 1, 0,   0, 1, 0,   0, 1, 1 ), byrow = TRUE, ncol = 3)  A2 <- matrix(c(   0, 1, 1,   1, 0, 0,   1, 0, 0 ), byrow = TRUE, nrow = 3)  B2 <- matrix(c(   1, 1, 0, 0,   0, 0, 1, 0,   0, 0, 1, 1 ), byrow = TRUE, ncol = 4)  A3 <- matrix(c(   0, 1, 3, 1,   1, 0, 0, 0,   3, 0, 0, 5,   1, 0, 5, 0 ), byrow = TRUE, ncol = 4)  rownames(A1) <- letters[1:nrow(A1)] colnames(A1) <- rownames(A1) rownames(A2) <- letters[nrow(A1) + 1:nrow(A2)] colnames(A2) <- rownames(A2) rownames(B1) <- rownames(A1) colnames(B1) <- colnames(A2) rownames(A3) <- letters[nrow(A1) + nrow(A2) + 1:nrow(A3)] colnames(A3) <- rownames(A3) rownames(B2) <- rownames(A2) colnames(B2) <- colnames(A3) matrix_report(A1) #> The matrix A might have the following characteristics: #> --> The vectors of the matrix are `numeric` #> --> Matrix is symmetric (network is undirected) #> --> The matrix is square, 5 by 5 #>      nodes edges #> [1,]     5     7 matrix_report(B1) # correct this! #> The matrix A might have the following characteristics: #> --> The vectors of the matrix are `numeric` #> --> The matrix is rectangular, 3 by 5 #>      nodes_rows nodes_columns incidence_lines #> [1,]          3             5               7 matrix_report(A2) #> The matrix A might have the following characteristics: #> --> The vectors of the matrix are `numeric` #> --> Matrix is symmetric (network is undirected) #> --> The matrix is square, 3 by 3 #>      nodes edges #> [1,]     3     2 matrix_report(B2) #> The matrix A might have the following characteristics: #> --> The vectors of the matrix are `numeric` #> --> The matrix is rectangular, 4 by 3 #>      nodes_rows nodes_columns incidence_lines #> [1,]          4             3               5 matrix_report(A3) #> The matrix A might have the following characteristics: #> --> The vectors of the matrix are `numeric` #> --> Valued matrix #> --> Matrix is symmetric (network is undirected) #> --> The matrix is square, 4 by 4 #>      nodes edges #> [1,]     4    10"},{"path":"https://anespinosa.github.io/netmem/articles/multilayer.html","id":"ties-within-and-between-modes","dir":"Articles","previous_headings":"Multilevel Networks","what":"Ties within and between modes","title":"multilayer","text":"cases incidence matrix also relationships node class. case, can use ‘meta-matrix’ (Krackhardt & Carley, 1998; Carley, 2002) represent multilevel network.  density matrices? degree centrality entire structure? Besides, can perform k-core analysis one levels using information incidence matrix package also allows performing complex census multilevel networks Also, functions allowed performing zone-2 sampling second-mode (2-path distance ego second level)   Willing create multilevel network? can simulate multilevel network 30 actors first level 20 nodes second level.","code":"meta_matrix(A1, B1, A2, B2, A3) #>   a b c d e f g h i j k l #> a 0 1 0 0 1 1 0 0 0 0 0 0 #> b 1 0 0 1 1 1 1 0 0 0 0 0 #> c 0 0 0 1 1 0 1 0 0 0 0 0 #> d 0 1 1 0 1 0 1 0 0 0 0 0 #> e 1 1 1 1 0 0 1 1 0 0 0 0 #> f 1 1 0 0 0 0 1 1 1 1 0 0 #> g 0 1 1 1 1 1 0 0 0 0 1 0 #> h 0 0 0 0 1 1 0 0 0 0 1 1 #> i 0 0 0 0 0 0 0 0 0 1 3 1 #> j 0 0 0 0 0 0 0 0 1 0 0 0 #> k 0 0 0 0 0 0 0 0 3 0 0 5 #> l 0 0 0 0 0 0 0 0 1 0 5 0 meta_matrix(A1, B1, A2, B2) #>   a b c d e f g h i j k l #> a 0 1 0 0 1 1 0 0 0 0 0 0 #> b 1 0 0 1 1 1 1 0 0 0 0 0 #> c 0 0 0 1 1 0 1 0 0 0 0 0 #> d 0 1 1 0 1 0 1 0 0 0 0 0 #> e 1 1 1 1 0 0 1 1 0 0 0 0 #> f 1 1 0 0 0 0 1 1 1 1 0 0 #> g 0 1 1 1 1 1 0 0 0 0 1 0 #> h 0 0 0 0 1 1 0 0 0 0 1 1 #> i 0 0 0 0 0 0 0 0 0 0 0 0 #> j 0 0 0 0 0 0 0 0 0 0 0 0 #> k 0 0 0 0 0 0 0 0 0 0 0 0 #> l 0 0 0 0 0 0 0 0 0 0 0 0  library(igraph) plot(graph.adjacency(meta_matrix(A1, B1, A2, B2, A3), mode = c(\"directed\"))) #> Warning: `graph.adjacency()` was deprecated in igraph 2.0.0. #> ℹ Please use `graph_from_adjacency_matrix()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. matrices <- list(A1, B1, A2, B2) gen_density(matrices, multilayer = TRUE) #> $`Density of matrix [[1]]` #> [1] 0.7 #>  #> $`Density of matrix [[2]]` #> [1] 0.4666667 #>  #> $`Density of matrix [[3]]` #> [1] 0.6666667 #>  #> $`Density of matrix [[4]]` #> [1] 0.4166667 multilevel_degree(A1, B1, A2, B2, complete = TRUE) #>    multilevel bipartiteB1 bipartiteB2 tripartiteB1B2 low_multilevel #> n1          3           1          NA              1              3 #> n2          5           2          NA              2              5 #> n3          3           1          NA              1              3 #> n4          4           1          NA              1              4 #> n5          6           2          NA              2              6 #> m1          6           2           2              4              4 #> m2          6           4           1              5              5 #> m3          4           1           2              3              3 #> k1          4          NA           1              1              1 #> k2          2          NA           1              1              1 #> k3          3          NA           2              2              2 #> k4          1          NA           1              1              1 #>    meso_multilevel high_multilevel #> n1               1               1 #> n2               2               2 #> n3               1               1 #> n4               1               1 #> n5               2               2 #> m1               6               4 #> m2               6               5 #> m3               4               3 #> k1               1               1 #> k2               1               1 #> k3               2               2 #> k4               1               1 k_core(A1, B1, multilevel = TRUE) #> [1] 1 3 1 2 3 mixed_census(A2, t(B1), B2, quad = TRUE) #>   000   100   001   010   020   200  11D0  11U0   120   210   220   002  01D1  #>     2     6     1     0     0     2     0     0     4     0     1     1     0  #>  01U1   012   021   022  101N  101P   201   102   202 11D1W 11U1P 11D1P 11U1W  #>     0     0     8     0     3     0     1     3     1     0     0     0     0  #>  121W  121P  21D1  21U1  11D2  11U2   221   122   212   222  #>    11    13     0     0     0     0     3     0     0     0 library(igraph) m <- meta_matrix(A1, B1) g <- graph.adjacency(m, mode = c(\"undirected\")) V(g)$type <- ifelse(V(g)$name %in% colnames(B1), TRUE, FALSE) plot(g, vertex.color = ifelse(V(g)$type == TRUE, \"blue\", \"red\")) two_mode_sam <- zone_sample(A1, B1, ego = TRUE) for (i in 1:ncol(B1)) {   V(two_mode_sam[[i]])$color <- ifelse(V(two_mode_sam[[i]])$name %in% colnames(B1), \"blue\", \"red\")    plot(as.undirected(two_mode_sam[[i]]), vertex.color = V(two_mode_sam[[i]])$color, main = names(two_mode_sam)[i]) } #> Warning: `as.undirected()` was deprecated in igraph 2.1.0. #> ℹ Please use `as_undirected()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. set.seed(26091949) ind_rand_matrix(n = 30, m = 20, type = \"probability\", p = 0.2, multilevel = TRUE) #>     n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 n11 n12 n13 n14 n15 n16 n17 n18 n19 n20 n21 #> n1   0  0  1  0  0  0  1  0  0   1   0   0   1   0   0   0   0   0   0   0   0 #> n2   0  0  0  0  0  0  0  0  0   0   0   1   0   0   1   0   1   0   0   1   0 #> n3   0  0  0  0  0  0  1  0  0   0   0   0   1   0   0   0   0   0   0   0   0 #> n4   0  0  1  0  0  0  0  0  0   0   0   0   1   0   1   0   0   0   0   1   0 #> n5   0  0  1  0  0  0  0  0  1   0   1   0   0   1   0   0   1   0   0   0   0 #> n6   1  0  0  0  0  0  0  0  0   0   0   0   1   1   1   0   0   0   0   0   1 #> n7   0  0  1  0  0  0  0  0  0   0   0   1   0   0   0   0   1   0   0   0   1 #> n8   0  0  0  0  0  0  0  0  0   0   0   1   0   0   1   1   1   0   0   0   0 #> n9   0  0  0  0  1  0  0  0  0   0   0   0   0   0   0   0   0   0   0   0   0 #> n10  0  0  1  0  1  0  0  0  0   0   0   0   0   0   0   0   0   0   1   0   0 #> n11  1  0  0  1  0  1  0  0  0   0   0   0   0   1   0   0   1   0   0   0   0 #> n12  0  0  0  0  0  0  0  0  0   1   0   0   0   0   0   0   0   0   1   0   0 #> n13  0  0  0  0  0  0  0  0  0   0   0   0   0   0   1   0   0   0   1   0   0 #> n14  0  0  1  0  0  0  0  0  0   0   0   0   0   0   0   0   0   1   1   0   0 #> n15  0  0  0  0  1  0  0  1  1   0   0   0   0   0   0   0   0   0   0   0   0 #> n16  0  1  0  0  1  0  0  0  0   1   1   0   0   0   1   0   0   0   0   0   1 #> n17  0  1  0  0  0  0  1  0  0   0   0   0   0   0   0   1   0   0   0   0   0 #> n18  1  0  0  0  0  0  1  0  1   0   0   0   0   0   0   0   0   0   1   0   0 #> n19  1  0  1  0  0  1  0  0  0   1   0   0   0   0   0   1   0   0   0   0   0 #> n20  0  1  0  0  0  0  0  1  0   1   0   0   1   0   0   0   1   1   0   0   0 #> n21  0  0  0  1  1  1  0  0  0   0   0   0   0   1   0   0   0   0   1   0   0 #> n22  0  0  0  0  0  0  0  0  0   0   1   0   0   0   0   0   0   0   0   0   0 #> n23  1  0  0  0  0  1  1  0  1   0   0   0   0   0   0   0   1   0   0   1   0 #> n24  0  0  0  0  0  0  0  0  0   0   0   0   0   0   0   0   0   0   0   0   0 #> n25  1  0  0  0  1  0  0  0  0   0   0   0   1   0   0   0   0   0   0   0   0 #> n26  0  0  1  0  0  0  0  0  0   0   0   0   0   0   0   0   0   0   0   0   1 #> n27  0  0  1  0  0  0  0  0  0   0   0   0   0   0   0   0   0   0   0   0   0 #> n28  1  0  1  0  0  1  0  0  0   0   0   0   0   1   0   0   1   1   1   0   0 #> n29  0  0  0  0  0  0  0  0  0   0   1   0   0   0   0   0   0   0   1   0   0 #> n30  0  0  0  1  0  0  0  1  0   0   0   0   1   0   1   0   0   0   0   1   0 #> m1   0  0  0  0  0  0  0  0  0   1   0   0   0   1   0   0   0   1   0   0   0 #> m2   0  1  0  0  1  1  0  1  0   0   0   0   0   0   0   0   0   1   0   0   0 #> m3   0  0  0  0  0  0  0  0  0   0   0   0   0   0   1   1   0   1   1   0   0 #> m4   0  0  0  0  1  1  0  0  0   0   0   0   0   0   0   0   1   1   1   0   0 #> m5   0  0  0  1  0  0  0  0  0   0   0   0   1   1   0   0   0   1   0   1   0 #> m6   0  0  0  0  0  0  0  1  1   0   0   1   0   0   1   0   0   0   0   0   1 #> m7   0  0  0  1  0  0  1  0  1   0   0   0   0   0   0   0   1   0   0   1   0 #> m8   0  0  0  0  0  0  0  0  0   1   0   0   0   0   1   0   0   0   0   1   0 #> m9   1  0  0  1  0  0  1  0  0   0   0   0   0   0   0   0   0   0   0   1   0 #> m10  1  0  0  1  0  1  0  0  0   1   0   0   0   0   0   0   0   0   0   0   0 #> m11  0  0  0  1  1  1  0  0  0   1   0   1   0   0   0   0   0   1   0   1   1 #> m12  0  1  0  0  0  1  0  0  0   0   0   0   0   0   1   1   0   1   0   0   0 #> m13  0  0  1  0  0  0  1  0  0   0   0   0   0   0   0   0   1   1   0   0   0 #> m14  0  0  0  0  0  0  0  0  0   0   0   0   0   1   0   0   0   0   0   0   0 #> m15  0  0  0  0  0  0  0  0  0   0   0   0   1   0   1   1   0   1   0   1   0 #> m16  0  0  0  0  0  1  0  0  0   0   0   0   0   0   0   0   0   0   0   0   1 #> m17  0  1  0  0  1  0  1  1  0   0   0   0   0   1   1   0   1   0   0   0   0 #> m18  0  1  0  0  1  0  0  0  0   1   0   0   0   0   0   0   0   0   0   0   0 #> m19  1  0  0  0  0  0  0  1  0   1   0   0   0   1   0   0   1   1   0   0   0 #> m20  0  0  0  0  0  1  0  1  0   0   0   0   0   0   0   1   0   0   0   0   0 #>     n22 n23 n24 n25 n26 n27 n28 n29 n30 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 #> n1    0   1   1   0   1   0   0   1   0  0  0  0  0  0  0  0  0  1   1   0   0 #> n2    1   0   0   1   0   0   0   1   0  0  1  0  0  0  0  0  0  0   0   0   1 #> n3    0   1   0   0   0   1   0   0   1  0  0  0  0  0  0  0  0  0   0   0   0 #> n4    0   0   0   1   0   1   0   0   0  0  0  0  0  1  0  1  0  1   1   1   0 #> n5    0   1   0   0   0   1   0   1   0  0  1  0  1  0  0  0  0  0   0   1   0 #> n6    0   0   0   0   0   0   0   0   0  0  1  0  1  0  0  0  0  0   1   1   1 #> n7    1   0   0   0   1   0   0   0   1  0  0  0  0  0  0  1  0  1   0   0   0 #> n8    0   0   0   0   1   1   0   0   0  0  1  0  0  0  1  0  0  0   0   0   0 #> n9    0   0   1   1   1   0   1   0   0  0  0  0  0  0  1  1  0  0   0   0   0 #> n10   0   1   1   0   1   0   0   1   0  1  0  0  0  0  0  0  1  0   1   1   0 #> n11   0   0   0   0   0   1   0   1   0  0  0  0  0  0  0  0  0  0   0   0   0 #> n12   0   0   0   1   0   0   0   0   0  0  0  0  0  0  1  0  0  0   0   1   0 #> n13   0   1   0   0   1   1   1   0   0  0  0  0  0  1  0  0  0  0   0   0   0 #> n14   0   0   1   0   0   1   0   0   0  1  0  0  0  1  0  0  0  0   0   0   0 #> n15   1   0   0   1   0   0   0   0   0  0  0  1  0  0  1  0  1  0   0   0   1 #> n16   0   1   1   0   0   0   1   0   1  0  0  1  0  0  0  0  0  0   0   0   1 #> n17   0   0   0   0   0   0   0   0   0  0  0  0  1  0  0  1  0  0   0   0   0 #> n18   0   0   0   0   1   0   0   0   1  1  1  1  1  1  0  0  0  0   0   1   1 #> n19   0   0   0   0   0   0   0   0   0  0  0  1  1  0  0  0  0  0   0   0   0 #> n20   0   0   0   1   0   0   1   0   0  0  0  0  0  1  0  1  1  1   0   1   0 #> n21   0   0   0   1   0   1   0   1   0  0  0  0  0  0  1  0  0  0   0   1   0 #> n22   0   0   1   0   0   0   1   0   1  0  1  0  0  0  1  1  1  0   1   0   0 #> n23   0   0   0   0   0   0   1   0   0  0  1  0  0  0  1  0  0  0   0   0   0 #> n24   0   0   0   0   0   0   0   1   1  0  1  0  0  0  0  1  1  1   0   1   0 #> n25   0   0   0   0   0   1   1   0   0  0  0  0  0  0  0  0  0  1   0   0   0 #> n26   1   0   0   0   0   0   0   1   0  0  0  0  0  0  0  0  1  0   0   0   0 #> n27   1   1   0   0   0   0   0   1   0  0  0  1  1  0  0  1  1  0   0   0   0 #> n28   0   0   0   0   0   0   0   0   1  0  0  1  0  0  1  1  0  0   0   0   0 #> n29   1   0   0   0   0   1   1   0   0  0  1  0  1  0  0  0  1  0   0   0   1 #> n30   1   0   1   0   0   0   0   0   0  0  0  0  0  0  0  0  0  0   1   1   1 #> m1    0   0   0   0   0   0   0   0   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m2    1   1   1   0   0   0   0   1   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m3    0   0   0   0   0   1   1   0   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m4    0   0   0   0   0   1   0   1   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m5    0   0   0   0   0   0   0   0   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m6    1   1   0   0   0   0   1   0   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m7    1   0   1   0   0   1   1   0   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m8    1   0   1   0   1   1   0   1   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m9    0   0   1   1   0   0   0   0   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m10   1   0   0   0   0   0   0   0   1  0  0  0  0  0  0  0  0  0   0   0   0 #> m11   0   0   1   0   0   0   0   0   1  0  0  0  0  0  0  0  0  0   0   0   0 #> m12   0   0   0   0   0   0   0   1   1  0  0  0  0  0  0  0  0  0   0   0   0 #> m13   0   0   0   0   0   0   1   1   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m14   0   0   0   0   1   1   0   0   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m15   0   0   0   0   0   0   0   0   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m16   0   1   1   0   1   0   0   1   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m17   1   0   0   0   0   0   0   0   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m18   0   0   0   0   0   0   0   1   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m19   0   0   1   0   1   0   0   0   0  0  0  0  0  0  0  0  0  0   0   0   0 #> m20   0   0   0   0   0   0   0   0   0  0  0  0  0  0  0  0  0  0   0   0   0 #>     m13 m14 m15 m16 m17 m18 m19 m20 #> n1    0   0   0   0   0   0   1   0 #> n2    0   0   0   0   1   1   0   0 #> n3    1   0   0   0   0   0   0   0 #> n4    0   0   0   0   0   0   0   0 #> n5    0   0   0   0   1   1   0   0 #> n6    0   0   0   1   0   0   0   1 #> n7    1   0   0   0   1   0   0   0 #> n8    0   0   0   0   1   0   1   1 #> n9    0   0   0   0   0   0   0   0 #> n10   0   0   0   0   0   1   1   0 #> n11   0   0   0   0   0   0   0   0 #> n12   0   0   0   0   0   0   0   0 #> n13   0   0   1   0   0   0   0   0 #> n14   0   1   0   0   1   0   1   0 #> n15   0   0   1   0   1   0   0   0 #> n16   0   0   1   0   0   0   0   1 #> n17   1   0   0   0   1   0   1   0 #> n18   1   0   1   0   0   0   1   0 #> n19   0   0   0   0   0   0   0   0 #> n20   0   0   1   0   0   0   0   0 #> n21   0   0   0   1   0   0   0   0 #> n22   0   0   0   0   1   0   0   0 #> n23   0   0   0   1   0   0   0   0 #> n24   0   0   0   1   0   0   1   0 #> n25   0   0   0   0   0   0   0   0 #> n26   0   1   0   1   0   0   1   0 #> n27   0   1   0   0   0   0   0   0 #> n28   1   0   0   0   0   0   0   0 #> n29   1   0   0   1   0   1   0   0 #> n30   0   0   0   0   0   0   0   0 #> m1    0   0   0   0   0   0   0   0 #> m2    0   0   0   0   0   0   0   0 #> m3    0   0   0   0   0   0   0   0 #> m4    0   0   0   0   0   0   0   0 #> m5    0   0   0   0   0   0   0   0 #> m6    0   0   0   0   0   0   0   0 #> m7    0   0   0   0   0   0   0   0 #> m8    0   0   0   0   0   0   0   0 #> m9    0   0   0   0   0   0   0   0 #> m10   0   0   0   0   0   0   0   0 #> m11   0   0   0   0   0   0   0   0 #> m12   0   0   0   0   0   0   0   0 #> m13   0   0   0   0   0   0   0   0 #> m14   0   0   0   0   0   0   0   0 #> m15   0   0   0   0   0   0   0   0 #> m16   0   0   0   0   0   0   0   0 #> m17   0   0   0   0   0   0   0   0 #> m18   0   0   0   0   0   0   0   0 #> m19   0   0   0   0   0   0   0   0 #> m20   0   0   0   0   0   0   0   0"},{"path":"https://anespinosa.github.io/netmem/articles/multilayer.html","id":"multiplex-networks","dir":"Articles","previous_headings":"","what":"Multiplex networks","title":"multilayer","text":"multiplex networks, interlayer edges can connect nodes represent actor different layer (Kinsley et al., 2020) mentioned Gluckman (1955: 19): “shall constantly refer consistency Lozi law relationships serve many interests, propose, brevity, call multiplex relationships. require also term cover structure relationships person tends occupy position relative set persons networks purposive ties - economic, political, procreative, religious, educational.” explore functions available netmem use data Lazega (2001) densities networks? computing Jaccard index matrices? Finally, can conduct multiplex census two matrices. moment, one matrix asymmetric (directed) symmetric (undirected). Note: temporal networks special case multiplex network. Links dynamic, nodes can join leave different stages network evolution. example, toy example, maybe two authors longer available. case, might prefer maintaining name matrix assign NA row /column:","code":"data(\"lazega_lawfirm\") rownames(lazega_lawfirm$advice) <- as.character(1:ncol(lazega_lawfirm$advice)) colnames(lazega_lawfirm$advice) <- rownames(lazega_lawfirm$advice)  colnames(lazega_lawfirm$friends) <- rownames(lazega_lawfirm$advice) rownames(lazega_lawfirm$friends) <- colnames(lazega_lawfirm$friends) gen_density(list(   lazega_lawfirm$cowork, lazega_lawfirm$advice,   lazega_lawfirm$friends ), multilayer = TRUE) #> $`Density of matrix [[1]]` #> [1] 0.2317907 #>  #> $`Density of matrix [[2]]` #> [1] 0.2486922 #>  #> $`Density of matrix [[3]]` #> [1] 0.1251509 jaccard(lazega_lawfirm$cowork, lazega_lawfirm$advice) #> $jaccard #> [1] 0.4115983 #>  #> $proportion #> [1] 0.5271739 #>  #> $table #>       B #> A         0    1 <NA> #>   0    3556  310    0 #>   1     522  582    0 #>   <NA>    0    0    0  jaccard(lazega_lawfirm$cowork, lazega_lawfirm$friends) #> $jaccard #> [1] 0.2210909 #>  #> $proportion #> [1] 0.2753623 #>  #> $table #>       B #> A         0    1 <NA> #>   0    3595  271    0 #>   1     800  304    0 #>   <NA>    0    0    0  jaccard(lazega_lawfirm$advice, lazega_lawfirm$friends) #> $jaccard #> [1] 0.3228133 #>  #> $proportion #> [1] 0.4013453 #>  #> $table #>       B #> A         0    1 <NA> #>   0    3861  217    0 #>   1     534  358    0 #>   <NA>    0    0    0 multiplex_census(lazega_lawfirm$advice, lazega_lawfirm$friends) #>            003_003            003_102            003_201            003_300  #>               9541              17745              11384              10799  #>            012_003           012_102a           012_102b           012_102c  #>              30047              14872              10660              10711  #>           012_201b          012_201ac            012_300           021u_003  #>               9891              10263               9760              21434  #>         021u_102ac          021u_102b         021u_201ab          021u_201c  #>               2099               1157               1279               1650  #>           021u_300           021d_003         021d_102ac          021d_120b  #>               1148              21295               1908               1058  #>         021d_201ab          021d_201c           021d_300       102_003_102a  #>               1139               1511                910               8319  #>    102_102bc_201ac            102_300           021c_003          021c_102a  #>               3710               3109              21445               2059  #>          021c_103b          021c_102c         021c_210ab          021c_201c  #>                961               2110               1290               1661  #>           021c_300           030t_003         030t_102ab          030t_102b  #>               1159              21022                538                745  #>          030t_102c         030t_210ab      030t_201c_300           030c_003  #>                785                866                735              20555  #>        030c_102abc        030c_201abc           030c_300           111d_003  #>                 71                400                269              21338  #>     111d_102a_201a          111d_102b     111d_102c_201b      111d_201c_300  #>               1182               1215               1554               1051  #>           111u_003     111u_102a_201a    111u_102bc_201b      111u_201c_300  #>              21227               1071               1443                940  #>      120u_003_102b   120u_102ab_201ab      120u_201c_300      120d_003_120b  #>                457                579                448                580  #>   120d_102ab_201ab      120d_201c_300            201_003    201_102ac_201ab  #>                661                530              20776                992  #> 201_102c_201bc_300           120c_003          120c_120c           120c_210  #>                489              20620                136                465  #>           120c_300        210_003_210            210_300        300_003_300  #>                334                616                485                336 A <- matrix(c(   0, 1, 1,   1, 0, 1,   0, 0, 0 ), byrow = TRUE, ncol = 3) colnames(A) <- c(\"A\", \"C\", \"D\") rownames(A) <- c(\"A\", \"C\", \"D\")  # complete list of actors label <- c(\"A\", \"B\", \"C\", \"D\", \"E\")  structural_na(A, label) #> Warning in structural_na(A, label): Provided labels do not match the dimensions #> of the matrix. #>    A  B  C  D  E #> A  0 NA  1  1 NA #> B NA NA NA NA NA #> C  1 NA  0  1 NA #> D  0 NA  0  0 NA #> E NA NA NA NA NA"},{"path":"https://anespinosa.github.io/netmem/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alejandro Espinosa-Rada. Maintainer, author.","code":""},{"path":"https://anespinosa.github.io/netmem/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Espinosa-Rada (2025). netmem: Social Network Measures using Matrices. R package version 1.0-3, https://github.com/anespinosa/netmem.","code":"@Manual{,   title = {netmem: Social Network Measures using Matrices},   author = {Alejandro Espinosa-Rada},   year = {2025},   note = {R package version 1.0-3},   url = {https://github.com/anespinosa/netmem}, }"},{"path":"https://anespinosa.github.io/netmem/index.html","id":"netmem-network-measures-using-matrices-","dir":"","previous_headings":"","what":"Social Network Measures using Matrices","title":"Social Network Measures using Matrices","text":"goal netmem make available different measures analyse manipulate complex networks using matrices. 🖊 Author/mantainer: Alejandro Espinosa-Rada 🏫 Current: Institute Sociology, Pontificia Universidad Católica de Chile 🏫 : Social Networks Lab, ETH Zürich  package implements different measures analyse manipulate complex multilayer networks, ego-centric perspective, considering one-mode networks, valued ties (.e. weighted multiplex) multiple levels.","code":""},{"path":"https://anespinosa.github.io/netmem/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Social Network Measures using Matrices","text":"cite package ‘netmem’ publications use: Espinosa-Rada (2023). netmem: Social Network Measures using Matrices. R package version 1.0-3, https://anespinosa.github.io/netmem/, https://github.com/anespinosa/netmem. BibTeX entry LaTeX users @Manual{, title = {netmem: Social Network Measures using Matrices}, author = {Alejandro Espinosa-Rada}, year = {2023}, note = {R package version 1.0-3, https://anespinosa.github.io/netmem/}, url = {https://github.com/anespinosa/netmem}, }","code":""},{"path":"https://anespinosa.github.io/netmem/index.html","id":"functions-currently-available-in-netmem","dir":"","previous_headings":"","what":"Functions currently available in netmem:","title":"Social Network Measures using Matrices","text":"Utilities: matrix_report(): Matrix report matrix_adjlist(): Transform matrix adjacency list matrix_projection(): Unipartite projections matrix_to_edgelist(): Transform square matrix edge-list adj_to_matrix(): Transform adjacency list matrix adj_to_incidence(): Transform adjacency matrix incidence matrix cumulativeSumMatrices(): Cumulative sum matrices edgelist_to_matrix(): Transform edgelist matrix expand_matrix(): Expand matrix extract_component(): Extract components hypergraph(): Hypergraphs perm_matrix(): Permutation matrix perm_label(): Permute labels matrix power_function(): Power matrix meta_matrix(): Meta matrix multilevel networks minmax_overlap(): Minimum/maximum overlap mix_matrix(): Mixing matrix simplicial_complexes(): Simplicial complexes structural_na(): Structural missing data ego_net(): Ego network zone_sample(): Zone-2 sampling second-mode Ego personal networks: eb_constraint(): Constraint ei_index(): Krackhardt Stern’s E-index heterogeneity(): Blau’s IQV index redundancy(): Redundancy measures Path distances: bfs_ugraph(): Breath-first algorithm compound_relation(): Relational composition count_geodesics(): Count geodesic distances short_path(): Shortest path wlocal_distances(): Dijikstra’s algorithm (one actor) wall_distances(): Dijikstra’s algorithm (actors) Signed networks: posneg_index(): Positive-negative centrality struc_balance(): Structural balance Structural measures: gen_density(): Generalized density gen_degree(): Generalized degree multilevel_degree(): Degree centrality multilevel networks recip_coef(): Reciprocity trans_coef(): Transitivity trans_matrix(): Transitivity matrix components_id(): Components k_core(): Generalized k-core dyadic_census(): Dyad census multiplex_census(): Multiplex triad census mixed_census(): Multilevel triad quadrilateral census Cohesive subgroups: clique_table(): Clique table dyad_triad_table(): Forbidden triad table percolation_clique(): Clique percolation q_analysis(): Q-analysis shared_partners(): Shared partners Similarity measures: bonacich_norm(): Bonacich normalization co_ocurrence(): Co‐occurrence dist_sim_matrix(): Structural similarities fractional_approach(): Fractional approach jaccard(): Jaccard similarity Network inference: kp_reciprocity(): Reciprocity Katz Powell z_arctest(): Z test number arcs triad_uman(): Triad census analysis assuming U|MAN ind_rand_matrix(): Independent random matrix Geographic information: dist_geographic(): Geographical distances spatial_cor(): Spatial autocorrelation Data currently available: FIFAego: Ego FIFA FIFAex: Outside FIFA FIFAin: Inside FIFA krackhardt_friends: Krackhardt friends lazega_lawfirm: Lazega Law Firm Additional data classicnets: Classic Data Social Networks","code":""},{"path":[]},{"path":"https://anespinosa.github.io/netmem/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Social Network Measures using Matrices","text":"can install development version GitHub :","code":"### OPTION 1 # install.packages(\"devtools\") devtools::install_github(\"anespinosa/netmem\")  ### OPTION 2 options(repos = c(   netmem = \"https://anespinosa.r-universe.dev\",   CRAN = \"https://cloud.r-project.org\" )) install.packages(\"netmem\") library(netmem)"},{"path":"https://anespinosa.github.io/netmem/index.html","id":"multilevel-networks","dir":"","previous_headings":"","what":"Multilevel Networks","title":"Social Network Measures using Matrices","text":"Connections individuals often embedded complex structures, shape actors’ expectations, behaviours outcomes time. structures can interdependent exist different levels. Multilevel networks means can represent complex system using nodes edges different types. Check book edited Emmanuel Lazega Tom .B. Snijders book edited David Knoke, Mario Diani, James Hollway Dimitris Christopoulos.  multilevel structures, tend collect data different matrices representing variation ties within levels. Often, describe connection actors adjacency matrix relations levels incidence matrices. comfortable combination matrices common structure represent multilevel network highly complex.","code":""},{"path":"https://anespinosa.github.io/netmem/index.html","id":"example","dir":"","previous_headings":"Multilevel Networks","what":"Example","title":"Social Network Measures using Matrices","text":"Let’s assume multilevel network two adjacency matrices, one valued matrix two incidence matrices . A1: Adjacency Matrix level 1 B1: incidence Matrix level 1 level 2 A2: Adjacency Matrix level 2 B2: incidence Matrix level 2 level 3 A3: Valued Matrix level 3 Create data start report matrices: density matrices? degree centrality entire structure? Besides, can perform k-core analysis one levels using information incidence matrix package also allows performing complex census multilevel networks.","code":"A1 <- matrix(c(   0, 1, 0, 0, 1,   1, 0, 0, 1, 1,   0, 0, 0, 1, 1,   0, 1, 1, 0, 1,   1, 1, 1, 1, 0 ), byrow = TRUE, ncol = 5)  B1 <- matrix(c(   1, 0, 0,   1, 1, 0,   0, 1, 0,   0, 1, 0,   0, 1, 1 ), byrow = TRUE, ncol = 3)  A2 <- matrix(c(   0, 1, 1,   1, 0, 0,   1, 0, 0 ), byrow = TRUE, nrow = 3)  B2 <- matrix(c(   1, 1, 0, 0,   0, 0, 1, 0,   0, 0, 1, 1 ), byrow = TRUE, ncol = 4)  A3 <- matrix(c(   0, 1, 3, 1,   1, 0, 0, 0,   3, 0, 0, 5,   1, 0, 5, 0 ), byrow = TRUE, ncol = 4) matrix_report(A1) #> The matrix A might have the following characteristics: #> --> The vectors of the matrix are `numeric` #> --> No names assigned to the rows of the matrix #> --> No names assigned to the columns of the matrix #> --> Matrix is symmetric (network is undirected) #> --> The matrix is square, 5 by 5 #>      nodes edges #> [1,]     5     7 matrix_report(B1) #> The matrix A might have the following characteristics: #> --> The vectors of the matrix are `numeric` #> --> No names assigned to the rows of the matrix #> --> No names assigned to the columns of the matrix #> --> The matrix is rectangular, 3 by 5 #>      nodes_rows nodes_columns incidence_lines #> [1,]          3             5               7 matrix_report(A2) #> The matrix A might have the following characteristics: #> --> The vectors of the matrix are `numeric` #> --> No names assigned to the rows of the matrix #> --> No names assigned to the columns of the matrix #> --> Matrix is symmetric (network is undirected) #> --> The matrix is square, 3 by 3 #>      nodes edges #> [1,]     3     2 matrix_report(B2) #> The matrix A might have the following characteristics: #> --> The vectors of the matrix are `numeric` #> --> No names assigned to the rows of the matrix #> --> No names assigned to the columns of the matrix #> --> The matrix is rectangular, 4 by 3 #>      nodes_rows nodes_columns incidence_lines #> [1,]          4             3               5 matrix_report(A3) #> The matrix A might have the following characteristics: #> --> The vectors of the matrix are `numeric` #> --> No names assigned to the rows of the matrix #> --> No names assigned to the columns of the matrix #> --> Valued matrix #> --> Matrix is symmetric (network is undirected) #> --> The matrix is square, 4 by 4 #>      nodes edges #> [1,]     4    10 matrices <- list(A1, B1, A2, B2) gen_density(matrices, multilayer = TRUE) #> $`Density of matrix [[1]]` #> [1] 0.7 #>  #> $`Density of matrix [[2]]` #> [1] 0.4666667 #>  #> $`Density of matrix [[3]]` #> [1] 0.6666667 #>  #> $`Density of matrix [[4]]` #> [1] 0.4166667 multilevel_degree(A1, B1, A2, B2, complete = TRUE) #>    multilevel bipartiteB1 bipartiteB2 tripartiteB1B2 low_multilevel #> n1          3           1          NA              1              3 #> n2          5           2          NA              2              5 #> n3          3           1          NA              1              3 #> n4          4           1          NA              1              4 #> n5          6           2          NA              2              6 #> m1          6           2           2              4              4 #> m2          6           4           1              5              5 #> m3          4           1           2              3              3 #> k1          4          NA           1              1              1 #> k2          2          NA           1              1              1 #> k3          3          NA           2              2              2 #> k4          1          NA           1              1              1 #>    meso_multilevel high_multilevel #> n1               1               1 #> n2               2               2 #> n3               1               1 #> n4               1               1 #> n5               2               2 #> m1               6               4 #> m2               6               5 #> m3               4               3 #> k1               1               1 #> k2               1               1 #> k3               2               2 #> k4               1               1 k_core(A1, B1, multilevel = TRUE) #> [1] 1 3 1 2 3 mixed_census(A2, t(B1), B2, quad = TRUE) #>   000   100   001   010   020   200  11D0  11U0   120   210   220   002  01D1  #>     2     6     1     0     0     2     0     0     4     0     1     1     0  #>  01U1   012   021   022  101N  101P   201   102   202 11D1W 11U1P 11D1P 11U1W  #>     0     0     8     0     3     0     1     3     1     0     0     0     0  #>  121W  121P  21D1  21U1  11D2  11U2   221   122   212   222  #>    11    13     0     0     0     0     3     0     0     0"},{"path":"https://anespinosa.github.io/netmem/index.html","id":"ego-measures","dir":"","previous_headings":"Multilevel Networks","what":"Ego measures","title":"Social Network Measures using Matrices","text":"interested one particular actor, perform different network measures. example, actor e connections actors network. Therefore, estimate Ronald Burt’s measures. Also, sometimes might want subset group actors surrounding ego.","code":"# First we will assign names to the matrix rownames(A1) <- letters[1:nrow(A1)] colnames(A1) <- letters[1:ncol(A1)]  eb_constraint(A1, ego = \"e\") #> $results #>   term1 term2 term3 constraint normalization #> e  0.25 0.292 0.101      0.642         0.761 #>  #> $maximum #>     e  #> 0.766 redundancy(A1, ego = \"e\") #> $redundancy #> [1] 1.5 #>  #> $effective_size #> [1] 2.5 #>  #> $efficiency #> [1] 0.625 ego_net(A1, ego = \"e\") #>   a b c d #> a 0 1 0 0 #> b 1 0 0 1 #> c 0 0 0 1 #> d 0 1 1 0"},{"path":"https://anespinosa.github.io/netmem/index.html","id":"one-mode-network","dir":"","previous_headings":"Multilevel Networks","what":"One-mode network","title":"Social Network Measures using Matrices","text":"package expand measures one-mode networks, generalized degree centrality. Suppose consider valued matrix A3. alpha=0 count direct connections. , adding tuning parameter alpha=0.5 determine relative importance number ties compared tie weights. Also, conduct exploratory analysis using normalized degree incidence matrix. package also implements analysis dyads. can also check triad census assuming conditional uniform distribution considering different types dyads (U|MAN)","code":"gen_degree(A3, digraph = FALSE, weighted = TRUE) #> [1] 3.872983 1.000000 4.000000 3.464102 gen_degree(B1, bipartite = TRUE, normalized = TRUE) #> $bipartiteL1 #> [1] 0.3333333 0.6666667 0.3333333 0.3333333 0.6666667 #>  #> $bipartiteL2 #> [1] 0.4 0.8 0.2 # dyad census dyadic_census(A1) #>      Mutual Asymmetrics       Nulls  #>           7           0           3  # Katz and Powell reciprocity kp_reciprocity(A1) #> [1] 6.333333  # Z test of the number of arcs z_arctest(A1) #>     z     p  #> 1.789 0.074 triad_uman(A1) #>    label OBS   EXP   VAR   STD #> 1    003   0 0.083 0.076 0.276 #> 2    012   0 0.000 0.000 0.000 #> 3    102   2 1.750 0.688 0.829 #> 4   021D   0 0.000 0.000 0.000 #> 5   021U   0 0.000 0.000 0.000 #> 6   021C   0 0.000 0.000 0.000 #> 7   111D   0 0.000 0.000 0.000 #> 8   111U   0 0.000 0.000 0.000 #> 9   030T   0 0.000 0.000 0.000 #> 10  030C   0 0.000 0.000 0.000 #> 11   201   5 5.250 1.688 1.299 #> 12  120D   0 0.000 0.000 0.000 #> 13  120U   0 0.000 0.000 0.000 #> 14  120C   0 0.000 0.000 0.000 #> 15   210   0 0.000 0.000 0.000 #> 16   300   3 2.917 0.410 0.640"},{"path":"https://anespinosa.github.io/netmem/index.html","id":"code-of-conduct","dir":"","previous_headings":"Multilevel Networks","what":"Code of conduct","title":"Social Network Measures using Matrices","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://anespinosa.github.io/netmem/index.html","id":"to-do-list","dir":"","previous_headings":"Multilevel Networks","what":"To-do list","title":"Social Network Measures using Matrices","text":"","code":"# library(todor) # todor::todor_package(c(\"TODO\", \"FIXME\"))"},{"path":"https://anespinosa.github.io/netmem/index.html","id":"other-related-r-packages","dir":"","previous_headings":"Multilevel Networks","what":"Other related R packages","title":"Social Network Measures using Matrices","text":"{bipartite} {migraph} {multinet} {muxViz} {tnet} {xUCINET}","code":""},{"path":"https://anespinosa.github.io/netmem/reference/FIFAego.html","id":null,"dir":"Reference","previous_headings":"","what":"Ego FIFA — FIFAego","title":"Ego FIFA — FIFAego","text":"Multilevel Network regulatory transnational regime International Federation Association Football (FIFA)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/FIFAego.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ego FIFA — FIFAego","text":"","code":"data(FIFAego)"},{"path":"https://anespinosa.github.io/netmem/reference/FIFAego.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ego FIFA — FIFAego","text":"list 48 x 48 symmetric matrix ego network FIFA different entity, string vector label actors","code":""},{"path":"https://anespinosa.github.io/netmem/reference/FIFAego.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Ego FIFA — FIFAego","text":"Espinosa, Alejandro & Ortiz, Francisca (2016). \"Jurisdictional autonomy regulatory transnational regime FIFA\". REDES- Revista Hispana para el Analisis de Redes Sociales, 27(1), 100- 112. (Original title Spanish: \"Autonomia jurisdiccional en el reegimen regulatorio transnacional de la FIFAFA\") <doi: https://doi.org/10.5565/rev/redes.595>","code":""},{"path":"https://anespinosa.github.io/netmem/reference/FIFAex.html","id":null,"dir":"Reference","previous_headings":"","what":"Outside FIFA — FIFAex","title":"Outside FIFA — FIFAex","text":"Multilevel Network regulatory transnational regime International Federation Association Football (FIFA)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/FIFAex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outside FIFA — FIFAex","text":"","code":"data(FIFAex)"},{"path":"https://anespinosa.github.io/netmem/reference/FIFAex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Outside FIFA — FIFAex","text":"list 7 x 7 symmetric matrix non-FIFA organizations, string vector label actors","code":""},{"path":"https://anespinosa.github.io/netmem/reference/FIFAex.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Outside FIFA — FIFAex","text":"Espinosa, Alejandro & Ortiz, Francisca (2016). \"Jurisdictional autonomy regulatory transnational regime FIFA\". REDES- Revista Hispana para el Analisis de Redes Sociales, 27(1), 100- 112. (Original title Spanish: \"Autonomia jurisdiccional en el reegimen regulatorio transnacional de la FIFAFA\") <doi: https://doi.org/10.5565/rev/redes.595>#'","code":""},{"path":"https://anespinosa.github.io/netmem/reference/FIFAin.html","id":null,"dir":"Reference","previous_headings":"","what":"Inside FIFA — FIFAin","title":"Inside FIFA — FIFAin","text":"Multilevel Network regulatory transnational regime International Federation Association Football (FIFA)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/FIFAin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inside FIFA — FIFAin","text":"","code":"data(FIFAin)"},{"path":"https://anespinosa.github.io/netmem/reference/FIFAin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Inside FIFA — FIFAin","text":"list 41 x 41 symmetric matrix roles organizations inside FIFA, string vector label actors","code":""},{"path":"https://anespinosa.github.io/netmem/reference/FIFAin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Inside FIFA — FIFAin","text":"Espinosa, Alejandro & Ortiz, Francisca (2016). \"Jurisdictional autonomy regulatory transnational regime FIFA\". REDES- Revista Hispana para el Analisis de Redes Sociales, 27(1), 100- 112. (Original title Spanish: \"Autonomia jurisdiccional en el reegimen regulatorio transnacional de la FIFAFA\") <doi: https://doi.org/10.5565/rev/redes.595>","code":""},{"path":"https://anespinosa.github.io/netmem/reference/adj_to_incidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an Adjacency Matrix to an Incidence Matrix — adj_to_incidence","title":"Convert an Adjacency Matrix to an Incidence Matrix — adj_to_incidence","text":"function transforms adjacency matrix incidence matrix.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/adj_to_incidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an Adjacency Matrix to an Incidence Matrix — adj_to_incidence","text":"","code":"adj_to_incidence(A, loops = TRUE, directed = TRUE, weighted = TRUE)"},{"path":"https://anespinosa.github.io/netmem/reference/adj_to_incidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an Adjacency Matrix to an Incidence Matrix — adj_to_incidence","text":"square numeric matrix representing adjacency matrix graph. matrix non-negative values, `[, j]` represents weight edge node `` node `j`. loops Logical. `TRUE`, self-loops (edges node ) included incidence matrix. `FALSE`, removed. Default `TRUE`. directed Logical. `TRUE`, graph treated directed, meaning edge specific source target. `FALSE`, graph treated undirected, edges symmetrically represented. Default `TRUE`. weighted Logical. `TRUE`, edge weights `` included incidence matrix. `FALSE`, edges treated weight `1`. Default `TRUE`.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/adj_to_incidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an Adjacency Matrix to an Incidence Matrix — adj_to_incidence","text":"numeric matrix rows represent nodes columns represent edges.   - **directed** network, source node negative value (-weight),     target node positive value (+weight).   - **undirected** network, nodes involved edge share weight     (positive values).   - `weighted = FALSE`, edges weight `1`.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/adj_to_incidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an Adjacency Matrix to an Incidence Matrix — adj_to_incidence","text":"","code":"# Define an adjacency matrix (directed and weighted) A <- matrix(c(   1, 3, 0, 0, 2,   0, 0, 2, 0, 0,   5, 0, 0, 0, 0,   0, 0, 0, 0, 1,   0, 4, 0, 0, 0 ), byrow = TRUE, nrow = 5)  # Convert to an incidence matrix (directed, weighted) (inc_matrix <- adj_to_incidence(A)) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    5   -3    0    0   -2    0 #> [2,]    0    0    3    4   -2    0    0 #> [3,]    0   -5    0    0    2    0    0 #> [4,]    0    0    0    0    0    0   -1 #> [5,]    0    0    0   -4    0    2    1  # Undirected, weighted graph (inc_matrix_undirected <- adj_to_incidence(A, directed = FALSE)) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    3    0    2    0 #> [2,]    0    3    2    0    0 #> [3,]    0    0    2    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    0    2    1  # Directed, unweighted graph (inc_matrix_unweighted <- adj_to_incidence(A, weighted = FALSE)) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    1   -1    0    0   -1    0 #> [2,]    0    0    1    1   -1    0    0 #> [3,]    0   -1    0    0    1    0    0 #> [4,]    0    0    0    0    0    0   -1 #> [5,]    0    0    0   -1    0    1    1  # Ignore loops (inc_matrix_no_loops <- adj_to_incidence(A, loops = FALSE)) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    5   -3    0    0   -2    0 #> [2,]    0    3    4   -2    0    0 #> [3,]   -5    0    0    2    0    0 #> [4,]    0    0    0    0    0   -1 #> [5,]    0    0   -4    0    2    1"},{"path":"https://anespinosa.github.io/netmem/reference/adj_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform an adjacency list into a matrix — adj_to_matrix","title":"Transform an adjacency list into a matrix — adj_to_matrix","text":"Transform adjacency list matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/adj_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform an adjacency list into a matrix — adj_to_matrix","text":"","code":"adj_to_matrix(A, type = c(\"adjacency\", \"incidence\", \"weighted\"), loops = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/adj_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform an adjacency list into a matrix — adj_to_matrix","text":"adjacent list type Transform adjacent list adjacency matrix, incidence matrix weighted matrix loops Whether include loops matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/adj_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform an adjacency list into a matrix — adj_to_matrix","text":"function transforms adjacency list matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/adj_to_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform an adjacency list into a matrix — adj_to_matrix","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/adj_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform an adjacency list into a matrix — adj_to_matrix","text":"","code":"adj_groups <- rbind(   c(\"a\", \"b\", \"c\"), c(\"a\", \"c\", NA),   c(\"b\", \"c\", NA), c(\"c\", NA, NA),   c(\"c\", \"a\", NA) ) M <- adj_to_matrix(adj_groups, type = \"adjacency\", loops = TRUE) M #>   a a b c c #> a 1 1 1 1 1 #> a 1 1 0 1 1 #> b 0 0 1 1 1 #> c 0 0 0 1 1 #> c 1 1 0 1 1"},{"path":"https://anespinosa.github.io/netmem/reference/bonacich_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Bonacich normalization — bonacich_norm","title":"Bonacich normalization — bonacich_norm","text":"function provide normalisation provided Bonacich (1972).","code":""},{"path":"https://anespinosa.github.io/netmem/reference/bonacich_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bonacich normalization — bonacich_norm","text":"","code":"bonacich_norm(A, projection = c(\"rows\", \"columns\"), normalisation = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/bonacich_norm.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bonacich normalization — bonacich_norm","text":"Adapted Borgatti, S., Everett, M., Johnson, J. Agneessens, P. (2022) Analyzing Social Networks Using R. Sage.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/bonacich_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bonacich normalization — bonacich_norm","text":"incidence matrix projection Whether normalise rows (default), columns matrix. normalisation Normalise measure","code":""},{"path":"https://anespinosa.github.io/netmem/reference/bonacich_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bonacich normalization — bonacich_norm","text":"function returns Bonacich normalisation.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/bonacich_norm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bonacich normalization — bonacich_norm","text":"Bonacich, P. (1972). Factoring weighting approaches status scores clique identification. Journal Mathematical Sociology, 2: 112-120.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/bonacich_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bonacich normalization — bonacich_norm","text":"","code":"A <- matrix(   c(     1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0,     1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,     0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,     1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,     0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,     0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0,     0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0,     0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1,     0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1,     0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,     0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0,     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0   ),   byrow = TRUE, ncol = 14 ) bonacich_norm(A) #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,] 1.0000000 0.7947869 0.8554094 0.7947869 0.6339746 1.0000000 0.6339746 #>  [2,] 0.7947869 1.0000000 0.7947869 0.8571429 0.6796228 1.0000000 1.0000000 #>  [3,] 0.8554094 0.7947869 1.0000000 0.7947869 1.0000000 1.0000000 1.0000000 #>  [4,] 0.7947869 0.8571429 0.7947869 1.0000000 1.0000000 1.0000000 1.0000000 #>  [5,] 0.6339746 0.6796228 1.0000000 1.0000000 1.0000000 0.6666667 0.6666667 #>  [6,] 1.0000000 1.0000000 1.0000000 1.0000000 0.6666667 1.0000000 0.8386095 #>  [7,] 0.6339746 1.0000000 1.0000000 1.0000000 0.6666667 0.8386095 1.0000000 #>  [8,] 1.0000000 0.6077190 1.0000000 0.6077190 0.0000000 0.7500000 0.7500000 #>  [9,] 0.6339746 0.6796228 1.0000000 0.6796228 0.6666667 0.6666667 0.8386095 #> [10,] 0.4494897 0.5000000 0.6339746 0.5000000 0.4686270 0.4686270 0.6666667 #> [11,] 0.4494897 0.3203772 0.4494897 0.3203772 0.0000000 0.4686270 0.4686270 #> [12,] 0.2898979 0.2052131 0.2898979 0.2052131 0.0000000 0.3660254 0.3660254 #> [13,] 0.2052131 0.2857143 0.3538894 0.2857143 0.3203772 0.3203772 0.5000000 #> [14,] 0.0000000 0.2052131 0.2572843 0.2052131 0.2742919 0.2742919 0.4494897 #> [15,] 0.2108967 0.4220645 0.3660254 0.4220645 0.4142136 0.4142136 0.6043561 #> [16,] 1.0000000 0.5000000 1.0000000 0.5000000 0.0000000 0.6339746 0.6339746 #> [17,] 0.4580399 0.0000000 0.4580399 0.0000000 0.0000000 0.0000000 0.0000000 #> [18,] 0.4580399 0.0000000 0.4580399 0.0000000 0.0000000 0.0000000 0.0000000 #>            [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14] #>  [1,] 1.0000000 0.6339746 0.4494897 0.4494897 0.2898979 0.2052131 0.0000000 #>  [2,] 0.6077190 0.6796228 0.5000000 0.3203772 0.2052131 0.2857143 0.2052131 #>  [3,] 1.0000000 1.0000000 0.6339746 0.4494897 0.2898979 0.3538894 0.2572843 #>  [4,] 0.6077190 0.6796228 0.5000000 0.3203772 0.2052131 0.2857143 0.2052131 #>  [5,] 0.0000000 0.6666667 0.4686270 0.0000000 0.0000000 0.3203772 0.2742919 #>  [6,] 0.7500000 0.6666667 0.4686270 0.4686270 0.3660254 0.3203772 0.2742919 #>  [7,] 0.7500000 0.8386095 0.6666667 0.4686270 0.3660254 0.5000000 0.4494897 #>  [8,] 1.0000000 0.7500000 0.7500000 0.7500000 0.6516685 0.6077190 0.5635083 #>  [9,] 0.7500000 1.0000000 0.8386095 0.6666667 0.5505103 0.6796228 0.4494897 #> [10,] 0.7500000 0.8386095 1.0000000 0.8386095 0.7257081 1.0000000 0.6339746 #> [11,] 0.7500000 0.6666667 0.8386095 1.0000000 1.0000000 1.0000000 0.6339746 #> [12,] 0.6516685 0.5505103 0.7257081 1.0000000 1.0000000 1.0000000 0.7427157 #> [13,] 0.6077190 0.6796228 1.0000000 1.0000000 1.0000000 1.0000000 0.7947869 #> [14,] 0.5635083 0.4494897 0.6339746 0.6339746 0.7427157 0.7947869 1.0000000 #> [15,] 0.4833148 0.6043561 0.7759908 0.7759908 0.6339746 0.7387961 0.6909830 #> [16,] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.4580399 #> [17,] 0.6909830 0.6339746 0.6339746 0.6339746 0.5419601 0.5000000 1.0000000 #> [18,] 0.6909830 0.6339746 0.6339746 0.6339746 0.5419601 0.5000000 1.0000000 #>           [,15]     [,16]     [,17]     [,18] #>  [1,] 0.2108967 1.0000000 0.4580399 0.4580399 #>  [2,] 0.4220645 0.5000000 0.0000000 0.0000000 #>  [3,] 0.3660254 1.0000000 0.4580399 0.4580399 #>  [4,] 0.4220645 0.5000000 0.0000000 0.0000000 #>  [5,] 0.4142136 0.0000000 0.0000000 0.0000000 #>  [6,] 0.4142136 0.6339746 0.0000000 0.0000000 #>  [7,] 0.6043561 0.6339746 0.0000000 0.0000000 #>  [8,] 0.4833148 1.0000000 0.6909830 0.6909830 #>  [9,] 0.6043561 1.0000000 0.6339746 0.6339746 #> [10,] 0.7759908 1.0000000 0.6339746 0.6339746 #> [11,] 0.7759908 1.0000000 0.6339746 0.6339746 #> [12,] 0.6339746 1.0000000 0.5419601 0.5419601 #> [13,] 0.7387961 1.0000000 0.5000000 0.5000000 #> [14,] 0.6909830 0.4580399 1.0000000 1.0000000 #> [15,] 1.0000000 0.5857864 0.5857864 0.5857864 #> [16,] 0.5857864 1.0000000 0.7683375 0.7683375 #> [17,] 0.5857864 0.7683375 1.0000000 1.0000000 #> [18,] 0.5857864 0.7683375 1.0000000 1.0000000"},{"path":"https://anespinosa.github.io/netmem/reference/clique_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Clique table — clique_table","title":"Clique table — clique_table","text":"Exploration 3-cliques, maximum number three actors possible ties present among ","code":""},{"path":"https://anespinosa.github.io/netmem/reference/clique_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clique table — clique_table","text":"","code":"clique_table(A, list_cliques = FALSE, number = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/clique_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clique table — clique_table","text":"symmetric matrix object. list_cliques Whether return list cliques. number Number triangles","code":""},{"path":"https://anespinosa.github.io/netmem/reference/clique_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clique table — clique_table","text":"function return edge list actors participating 3-cliques. list_cliques = TRUE also  return list cliques per nodes. number = TRUE output returns number 3-cliques matrix.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/clique_table.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clique table — clique_table","text":"Luce, R.D. Perry, .D. (1949). method matrix analysis group structure. Psychometrika, 14: 95-116. Roethlisberger, F.J. Dickson, W.J. (1939). Management Worker. Harvard University Press, Cambridge, MA. Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/clique_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Clique table — clique_table","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/clique_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clique table — clique_table","text":"","code":"A <- matrix(c(   0, 1, 1, 0, 0, 0, 0, 1, 0,   1, 0, 1, 0, 0, 0, 0, 0, 0,   1, 1, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 1, 1, 0, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0,   0, 0, 0, 1, 0, 0, 1, 1, 0,   0, 0, 0, 0, 0, 1, 0, 1, 0,   1, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0 ), byrow = TRUE, ncol = 9) rownames(A) <- letters[1:nrow(A)] colnames(A) <- rownames(A) clique_table(A, list_cliques = TRUE, number = TRUE) #> $table #>      node triad300 #> [1,] \"a\"  \"1\"      #> [2,] \"b\"  \"1\"      #> [3,] \"c\"  \"1\"      #> [4,] \"f\"  \"2\"      #> [5,] \"g\"  \"2\"      #> [6,] \"h\"  \"2\"      #>  #> $n_triangles #> [1] 2 #>  #> $neighbours #> $neighbours$a #> [1] \"a\" \"b\" \"c\" #>  #> $neighbours$b #> [1] \"a\" \"b\" \"c\" #>  #> $neighbours$c #> [1] \"a\" \"b\" \"c\" #>  #> $neighbours$f #> [1] \"f\" \"g\" \"h\" #>  #> $neighbours$g #> [1] \"f\" \"g\" \"h\" #>  #> $neighbours$h #> [1] \"f\" \"g\" \"h\" #>  #>"},{"path":"https://anespinosa.github.io/netmem/reference/co_ocurrence.html","id":null,"dir":"Reference","previous_headings":"","what":"Co‐occurrence — co_ocurrence","title":"Co‐occurrence — co_ocurrence","text":"Co‐occurrence matrix based overlap function","code":""},{"path":"https://anespinosa.github.io/netmem/reference/co_ocurrence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Co‐occurrence — co_ocurrence","text":"","code":"co_ocurrence(   A,   similarity = c(\"ochiai\", \"cosine\"),   occurrence = TRUE,   projection = FALSE )"},{"path":"https://anespinosa.github.io/netmem/reference/co_ocurrence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Co‐occurrence — co_ocurrence","text":"matrix similarity similarities available either Ochiai (default) cosine. occurrence Whether treat matrix two-mode structure (.k.. rectangular matrix, occurrence matrix, affiliation matrix, bipartite network) projection Whether apply projection (inner product multiplication) matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/co_ocurrence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Co‐occurrence — co_ocurrence","text":"function returns normalisation matrix symmetrical co‐occurrence matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/co_ocurrence.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Co‐occurrence — co_ocurrence","text":"Borgatti, S. P., Halgin, D. S., 2011. Analyzing affiliation networks. : J. Scott P. J. Carrington (Eds.) Sage handbook social network analysis (pp. 417-433), Sage. Zhou, Q., & Leydesdorff, L. (2016). normalization occurrence Co-occurrence matrices bibliometrics using Cosine similarities Ochiai coefficients. Journal Association Information Science Technology, 67(11), 2805–2814. https://doi.org/10.1002/asi.23603","code":""},{"path":"https://anespinosa.github.io/netmem/reference/co_ocurrence.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Co‐occurrence — co_ocurrence","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/co_ocurrence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Co‐occurrence — co_ocurrence","text":"","code":"A <- matrix(   c(     2, 0, 2,     1, 1, 0,     0, 3, 3,     0, 2, 2,     0, 0, 1   ),   nrow = 5, byrow = TRUE )  co_ocurrence(A) #>           [,1]      [,2]      [,3] #> [1,] 1.0000000 0.2357023 0.8164966 #> [2,] 0.2357023 1.0000000 1.8763884 #> [3,] 0.8164966 1.8763884 1.0000000"},{"path":"https://anespinosa.github.io/netmem/reference/components_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Components — components_id","title":"Components — components_id","text":"function assigns id components nodes matrix belongs","code":""},{"path":"https://anespinosa.github.io/netmem/reference/components_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Components — components_id","text":"","code":"components_id(A)"},{"path":"https://anespinosa.github.io/netmem/reference/components_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Components — components_id","text":"matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/components_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Components — components_id","text":"vector assigning id components nodes matrix belongs","code":""},{"path":"https://anespinosa.github.io/netmem/reference/components_id.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Components — components_id","text":"Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/components_id.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Components — components_id","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/components_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Components — components_id","text":"","code":"A <- matrix(c(   0, 1, 1, 0, 0,   1, 0, 1, 0, 0,   1, 1, 0, 0, 0,   0, 0, 0, 0, 1,   0, 0, 0, 1, 0 ), byrow = TRUE, ncol = 5) rownames(A) <- letters[1:ncol(A)] colnames(A) <- rownames(A) components_id(A) #> $components #> [1] 1 1 1 2 2 #>  #> $size #> components #> 1 2  #> 3 2  #>"},{"path":"https://anespinosa.github.io/netmem/reference/compound_relation.html","id":null,"dir":"Reference","previous_headings":"","what":"Relational composition — compound_relation","title":"Relational composition — compound_relation","text":"function returns relational composition given matrices. compound relations define paths social process flows given matrices (Pattison, 1993). However, link may may aware . compound relations allow us identify \"possibly long devious chains effects propagating withing concrete social systems links various kinds\" (Lorrain & White, 1971: 50).","code":""},{"path":"https://anespinosa.github.io/netmem/reference/compound_relation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relational composition — compound_relation","text":"","code":"compound_relation(l = list(), comp = 3, matrices = FALSE, equate = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/compound_relation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relational composition — compound_relation","text":"l list matrices. comp number length paths form compound relation. matrices Whether return resulting matrices compound relations. equate Whether return semigroup equations.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/compound_relation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relational composition — compound_relation","text":"function provides composition concatenation compound relations primitives matrices.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/compound_relation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Relational composition — compound_relation","text":"Boorman, Scott . White, Harrison C. (1976) Social Structure Multiple Networks. II. Role Structures. American Journal Sociology. 81(6): 1384-1446. Lorrain, Francois White, Harrison C. (1971) Structural Equivalence Individuals Social Networks. Journal Mathematical Sociology. 1: 49-80 Pattison, Philippa (1993) Algebraic Models Social Networks. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/compound_relation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Relational composition — compound_relation","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/compound_relation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relational composition — compound_relation","text":"","code":"A <- matrix(c(   0, 1, 0, 0,   1, 0, 0, 0,   1, 1, 0, 1,   0, 0, 1, 0 ), byrow = TRUE, ncol = 4) rownames(A) <- letters[1:NCOL(A)] colnames(A) <- rownames(A)  B <- matrix(c(   0, 1, 0, 0,   1, 0, 0, 0,   0, 0, 0, 1,   0, 0, 1, 0 ), byrow = TRUE, ncol = 4) rownames(B) <- letters[1:NCOL(B)] colnames(B) <- rownames(B)  cmp <- compound_relation(list(A, B), comp = 2, matrices = TRUE, equate = TRUE) cmp$compound_relations #> [1] \"a\"  \"b\"  \"ab\" \"aa\" \"ba\" \"bb\" cmp$compound_matrices #> $a #>   a b c d #> a 0 1 0 0 #> b 1 0 0 0 #> c 1 1 0 1 #> d 0 0 1 0 #>  #> $b #>   a b c d #> a 0 1 0 0 #> b 1 0 0 0 #> c 0 0 0 1 #> d 0 0 1 0 #>  #> $ab #>   a b c d #> a 1 0 0 0 #> b 0 1 0 0 #> c 1 1 1 0 #> d 0 0 0 1 #>  #> $aa #>   a b c d #> a 1 0 0 0 #> b 0 1 0 0 #> c 1 1 1 0 #> d 1 1 0 1 #>  #> $ba #>   a b c d #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 1 1 0 1 #>  #> $bb #>   a b c d #> a 1 0 0 0 #> b 0 1 0 0 #> c 0 0 1 0 #> d 0 0 0 1 #>  cmp$equated #> [1] \"No reduced equation\""},{"path":"https://anespinosa.github.io/netmem/reference/cumulativeSumMatrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative sum of matrices — cumulativeSumMatrices","title":"Cumulative sum of matrices — cumulativeSumMatrices","text":"Cumulative sum matrices","code":""},{"path":"https://anespinosa.github.io/netmem/reference/cumulativeSumMatrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative sum of matrices — cumulativeSumMatrices","text":"","code":"cumulativeSumMatrices(matrixList)"},{"path":"https://anespinosa.github.io/netmem/reference/cumulativeSumMatrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative sum of matrices — cumulativeSumMatrices","text":"matrixList list matrices","code":""},{"path":"https://anespinosa.github.io/netmem/reference/cumulativeSumMatrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative sum of matrices — cumulativeSumMatrices","text":"function returns cumulative sum matrices","code":""},{"path":"https://anespinosa.github.io/netmem/reference/cumulativeSumMatrices.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cumulative sum of matrices — cumulativeSumMatrices","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/cumulativeSumMatrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative sum of matrices — cumulativeSumMatrices","text":"","code":"A <- matrix(c(   0, 1, 1,   0, 0, 0,   0, 1, 0 ), byrow = TRUE, ncol = 3) B <- matrix(c(   0, 0, 1,   0, 0, 0,   0, 0, 0 ), byrow = TRUE, ncol = 3) C <- matrix(c(   0, 0, 0,   1, 0, 0,   0, 0, 0 ), byrow = TRUE, ncol = 3) matrixList <- list(A, B, C) cumulativeSumMatrices(matrixList) #> [[1]] #>      [,1] [,2] [,3] #> [1,]    0    1    1 #> [2,]    0    0    0 #> [3,]    0    1    0 #>  #> [[2]] #>      [,1] [,2] [,3] #> [1,]    0    1    2 #> [2,]    0    0    0 #> [3,]    0    1    0 #>  #> [[3]] #>      [,1] [,2] [,3] #> [1,]    0    1    2 #> [2,]    1    0    0 #> [3,]    0    1    0 #>"},{"path":"https://anespinosa.github.io/netmem/reference/dist_geographic.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographical distances — dist_geographic","title":"Geographical distances — dist_geographic","text":"function calculate geographical distances considering list places specifying latitud longitud. function currently works degree decimal radians formats.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dist_geographic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographical distances — dist_geographic","text":"","code":"dist_geographic(   latitude,   longitud,   method = c(\"spherical\", \"harvesine\", \"manhattan\", \"minkowski\"),   places = NULL,   dd_to_radians = FALSE,   p = NULL )"},{"path":"https://anespinosa.github.io/netmem/reference/dist_geographic.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Geographical distances — dist_geographic","text":"Adapted Mario Pineda-Krch (Great-circle distance calculations R)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dist_geographic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geographical distances — dist_geographic","text":"latitude vector latitude longitud vector longitud method Whether use Spherical Law Cosines spherical (default), Haversine formula harvesine, Manhattan Distance manhattan Minkoowski distance minkowski places vector names places dd_to_radians Whether transform degree decimal format radians p Parameter p estimation Minkowski distance (default = 2, equivalent Euclidian Distance)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dist_geographic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geographical distances — dist_geographic","text":"function return distance matrix.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dist_geographic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geographical distances — dist_geographic","text":"","code":"set.seed(1234) x <- cbind(latitud = rnorm(5, -90), longitud = rnorm(5, 45)) dist_geographic(x[, 1], x[, 2], method = \"harvesine\") #>           [,1]       [,2]      [,3]      [,4]       [,5] #> [1,]     0.000 10082.8221 12409.829  8394.701 10610.5618 #> [2,] 10082.822     0.0000  5141.096 16711.983   980.0773 #> [3,] 12409.829  5141.0964     0.000 18176.087  4162.4257 #> [4,]  8394.701 16711.9829 18176.087     0.000 17689.1877 #> [5,] 10610.562   980.0773  4162.426 17689.188     0.0000"},{"path":"https://anespinosa.github.io/netmem/reference/dist_sim_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural similarities — dist_sim_matrix","title":"Structural similarities — dist_sim_matrix","text":"literature social network, Euclidean distance (Burt, 1976) correlations (Wasserman Faust, 1994) considered measures structural equivalence.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dist_sim_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural similarities — dist_sim_matrix","text":"","code":"dist_sim_matrix(   A,   method = c(\"euclidean\", \"hamming\", \"jaccard\"),   bipartite = FALSE )"},{"path":"https://anespinosa.github.io/netmem/reference/dist_sim_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural similarities — dist_sim_matrix","text":"matrix method similarities/distance currently available either Euclidean (default), Hamming, Jaccard. bipartite Whether object incidence matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dist_sim_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural similarities — dist_sim_matrix","text":"function returns distance matrix nodes matrix.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dist_sim_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Structural similarities — dist_sim_matrix","text":"Burt, Ronald S. (1976) Positions networks. Social Forces, 55(1): 93-122. Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dist_sim_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Structural similarities — dist_sim_matrix","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dist_sim_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural similarities — dist_sim_matrix","text":"","code":"A <- matrix(c(   0, 1, 0, 0, 1,   0, 0, 0, 1, 1,   0, 1, 0, 0, 1,   0, 0, 1, 1, 0,   0, 1, 0, 0, 0 ), nrow = 5, ncol = 5, byrow = TRUE) rownames(A) <- letters[1:nrow(A)] colnames(A) <- rownames(A) dist_sim_matrix(A, method = \"jaccard\") #>           [,1]      [,2]      [,3]      [,4] [,5] #> [1,] 0.0000000 0.6666667 0.0000000 1.0000000  0.5 #> [2,] 0.6666667 0.0000000 0.6666667 0.6666667  1.0 #> [3,] 0.0000000 0.6666667 0.0000000 1.0000000  0.5 #> [4,] 1.0000000 0.6666667 1.0000000 0.0000000  1.0 #> [5,] 0.5000000 1.0000000 0.5000000 1.0000000  0.0  A <- matrix(c(   0, 0, 3, 0, 5,   0, 0, 2, 0, 4,   5, 4, 0, 4, 0,   0, 3, 0, 1, 0,   0, 0, 0, 0, 2 ), nrow = 5, ncol = 5, byrow = TRUE) dist_sim_matrix(A, method = \"euclidean\") #>          [,1]     [,2]     [,3]     [,4]     [,5] #> [1,] 0.000000 1.414214 9.539392 6.633250 4.242641 #> [2,] 1.414214 0.000000 8.774964 5.477226 2.828427 #> [3,] 9.539392 8.774964 0.000000 5.916080 7.810250 #> [4,] 6.633250 5.477226 5.916080 0.000000 3.741657 #> [5,] 4.242641 2.828427 7.810250 3.741657 0.000000"},{"path":"https://anespinosa.github.io/netmem/reference/distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Path distances — distances","title":"Path distances — distances","text":"Distances nodes using breadth-first search (BFS) Dijkstra's algorithm find shortest path distances.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path distances — distances","text":"","code":"bfs_ugraph(A, from = NULL)  count_geodesics(A)  short_path(A, from = NULL, to = NULL)  wlocal_distances(A, select = c(\"all\", \"in\", \"out\"), from, to, path = c())  wall_distances(A, select = c(\"all\", \"in\", \"out\"))"},{"path":"https://anespinosa.github.io/netmem/reference/distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Path distances — distances","text":"symmetric matrix object Node path start Node path end select Whether consider sender receiver ties ego (), incoming ties (), outgoing ties (). default, . path Path nodes","code":""},{"path":"https://anespinosa.github.io/netmem/reference/distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Path distances — distances","text":"function returns distances o shortest path distance two nodes unweighted graph (bfs_ugraph, count_geodesics short_path respectively) weighted graphs (wlocal_distances wall_distances)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/distances.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Path distances — distances","text":"Dijkstra, E. W. (1959). note two problems connexion graphs. Numerische Mathematik. 1: 269–271.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/distances.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Path distances — distances","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Path distances — distances","text":"","code":"A <- matrix(c(   0, 1, 1, 0, 0, 0,   0, 0, 0, 1, 1, 0,   0, 0, 0, 0, 1, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0 ), byrow = TRUE, nrow = 6) rownames(A) <- letters[1:nrow(A)] colnames(A) <- letters[1:ncol(A)]  bfs_ugraph(A, from = \"a\") #> $pointers #> [1] NA  1  1  2  2  5 #>  #> $distances #> [1] 0 1 1 2 2 3 #>  A <- matrix(c(   0, 1, 1, 0, 0, 0,   0, 0, 0, 1, 1, 0,   0, 0, 0, 0, 1, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0 ), byrow = TRUE, nrow = 6) rownames(A) <- letters[1:nrow(A)] colnames(A) <- letters[1:ncol(A)]  count_geodesics(A) #> $counts #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    1    1    1    1    1 #> [2,]    0    1    0    1    1    1 #> [3,]    0    0    1    0    1    1 #> [4,]    0    0    0    1    0    0 #> [5,]    0    0    0    0    1    1 #> [6,]    0    0    0    0    0    1 #>  #> $distances #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    0    1    1    2    2    3 #> [2,]  Inf    0  Inf    1    1    2 #> [3,]  Inf  Inf    0  Inf    1    2 #> [4,]  Inf  Inf  Inf    0  Inf  Inf #> [5,]  Inf  Inf  Inf  Inf    0    1 #> [6,]  Inf  Inf  Inf  Inf  Inf    0 #>  A <- matrix(c(   0, 1, 1, 0, 0, 0,   0, 0, 0, 1, 1, 0,   0, 0, 0, 0, 1, 0,   0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0 ), byrow = TRUE, nrow = 6) rownames(A) <- letters[1:nrow(A)] colnames(A) <- letters[1:ncol(A)]  short_path(A, from = \"a\", to = \"d\") #> [1] \"a\" \"b\" \"d\" A <- matrix(   c(     0, 3, 3, 10, 15, 0, 0, 0,     1, 0, 5, 2, 7, 0, 0, 0,     3, 5, 0, 0, 0, 0, 0, 0,     10, 2, 0, 0, 2, 7, 12, 0,     11, 3, 0, 3, 0, 11, 2, 0,     0, 0, 0, 7, 11, 0, 3, 2,     0, 0, 0, 12, 2, 3, 0, 2,     0, 0, 0, 0, 0, 2, 2, 0   ),   byrow = TRUE, ncol = 8, nrow = 8 ) rownames(A) <- c(\"a\", \"b\", \"s\", \"c\", \"d\", \"e\", \"f\", \"z\") colnames(A) <- rownames(A) wlocal_distances(A, from = \"a\", to = \"d\") #> $path #> [1] \"a\" \"b\" \"c\" \"d\" #>  A <- matrix(   c(     0, 3, 3, 10, 15, 0, 0, 0,     1, 0, 5, 2, 7, 0, 0, 0,     3, 5, 0, 0, 0, 0, 0, 0,     10, 2, 0, 0, 2, 7, 12, 0,     11, 3, 0, 3, 0, 11, 2, 0,     0, 0, 0, 7, 11, 0, 3, 2,     0, 0, 0, 12, 2, 3, 0, 2,     0, 0, 0, 0, 0, 2, 2, 0   ),   byrow = TRUE, ncol = 8, nrow = 8 ) rownames(A) <- c(\"a\", \"b\", \"s\", \"c\", \"d\", \"e\", \"f\", \"z\") colnames(A) <- rownames(A) wall_distances(A, select = \"in\") #> $fromTo #> $fromTo$a #> [1] \"a\" \"b\" \"c\" \"d\" \"f\" \"z\" #>  #> $fromTo$b #> [1] \"b\" \"c\" \"d\" \"f\" \"z\" #>  #> $fromTo$s #> [1] \"s\" \"b\" \"c\" \"d\" \"f\" \"z\" #>  #> $fromTo$c #> [1] \"c\" \"d\" \"f\" \"z\" #>  #> $fromTo$d #> [1] \"d\" \"f\" \"z\" #>  #> $fromTo$e #> [1] \"e\" \"z\" #>  #> $fromTo$f #> [1] \"f\" \"z\" #>  #> $fromTo$z #> [1] \"z\" #>  #>"},{"path":"https://anespinosa.github.io/netmem/reference/dyad_triad_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Forbidden triad table — dyad_triad_table","title":"Forbidden triad table — dyad_triad_table","text":"function explores dyads triads (Simmel, 1950), building 'forbidden triad' (Granovetter, 1973). First, minimum structure isolated node, dyads. Afterwards, different combinations 'forbidden triads' explored.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dyad_triad_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forbidden triad table — dyad_triad_table","text":"","code":"dyad_triad_table(A, adjacency_list = FALSE, min = NULL, max = NULL)"},{"path":"https://anespinosa.github.io/netmem/reference/dyad_triad_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forbidden triad table — dyad_triad_table","text":"symmetric matrix object. adjacency_list Whether return adjacency list triads 201 per node. min Numeric constant, lower limit size triads 201 find. NULL means limit, ie. 0. max Numeric constant, upper limit size triads 201 find. NULL means limit.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dyad_triad_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forbidden triad table — dyad_triad_table","text":"function return list triads node belong. adjacency_list = TRUE also  return adjacency list 'forbidden triads' per node.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dyad_triad_table.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Forbidden triad table — dyad_triad_table","text":"Granovetter, M.S. (1973). Strength Weak Ties. American Journal Sociology. 78 (6): 1360–80. https://doi.org/10.1086/225469. Simmel, G. (1950). Individual Society. K. H. Wolff (Ed.), Sociology George Simmel. New York: Free Press. Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dyad_triad_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Forbidden triad table — dyad_triad_table","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dyad_triad_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forbidden triad table — dyad_triad_table","text":"","code":"A <- matrix(c(   0, 1, 1, 1, 0,   1, 0, 1, 0, 0,   1, 1, 0, 0, 0,   1, 0, 0, 0, 1,   0, 0, 0, 1, 0 ), byrow = TRUE, ncol = 5) rownames(A) <- letters[1:nrow(A)] colnames(A) <- letters[1:ncol(A)]  dyad_triad_table(A, adjacency_list = TRUE, min = 3) #> $nodes #>   node Triad201 #> 1    a        1 #> 2    b        1 #> 3    c        1 #>  #> $adjacency_list #> $adjacency_list$a #> [1] \"abc\" \"abd\" \"acd\" #>  #> $adjacency_list$b #> [1] \"abc\" #>  #> $adjacency_list$c #> [1] \"abc\" #>  #>"},{"path":"https://anespinosa.github.io/netmem/reference/dyadic_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Dyad census — dyadic_census","title":"Dyad census — dyadic_census","text":"Dyad census","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dyadic_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dyad census — dyadic_census","text":"","code":"dyadic_census(G, directed = TRUE, loops = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/dyadic_census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dyad census — dyadic_census","text":"G symmetric matrix object. directed Whether matrix directed loops Whether expect nonzero elements diagonal matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dyadic_census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dyad census — dyadic_census","text":"function return counts dyad census.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dyadic_census.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dyad census — dyadic_census","text":"Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dyadic_census.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dyad census — dyadic_census","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/dyadic_census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dyad census — dyadic_census","text":"","code":"data(krackhardt_friends) dyadic_census(krackhardt_friends) #>      Mutual Asymmetrics       Nulls  #>          23          56         131   data(FIFAin) dyadic_census(FIFAin[[1]], directed = FALSE) #> Mutual  Nulls  #>    111    709"},{"path":"https://anespinosa.github.io/netmem/reference/eb_constraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Constraint — eb_constraint","title":"Constraint — eb_constraint","text":"Everett Borgatti specification constraint measure binary matrices","code":""},{"path":"https://anespinosa.github.io/netmem/reference/eb_constraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constraint — eb_constraint","text":"","code":"eb_constraint(A, ego = NULL, digraph = FALSE, weighted = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/eb_constraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constraint — eb_constraint","text":"symmetric matrix object ego Name ego matrix digraph Whether  matrix directed undirected weighted Whether matrix weighted ","code":""},{"path":"https://anespinosa.github.io/netmem/reference/eb_constraint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constraint — eb_constraint","text":"function returns term 1, 2 3, normalization maximum value specification Everett Borgatti (2020), constraint Burt (1992).","code":""},{"path":"https://anespinosa.github.io/netmem/reference/eb_constraint.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Constraint — eb_constraint","text":"Burt, R.S., 1992. Structural Holes: Social Structure Competition. Harvard University Press, Cambridge. Everett, M.G. Borgatti, S., 2020. Unpacking Burt's constraint measure. Social Networks 62, pp. 50-57. doi: https://doi.org/10.1016/j.socnet.2020.02.001","code":""},{"path":"https://anespinosa.github.io/netmem/reference/eb_constraint.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constraint — eb_constraint","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/eb_constraint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constraint — eb_constraint","text":"","code":"A <- matrix(c(   0, 1, 1, 0, 0, 1,   1, 0, 1, 0, 0, 1,   1, 1, 0, 0, 0, 1,   0, 0, 0, 0, 1, 1,   0, 0, 0, 1, 0, 1,   1, 1, 1, 1, 1, 0 ), ncol = 6, byrow = TRUE)  rownames(A) <- letters[1:nrow(A)] colnames(A) <- letters[1:ncol(A)] eb_constraint(A, ego = \"f\") #> $results #>   term1 term2 term3 constraint normalization #> f   0.2  0.24 0.073      0.513         0.699 #>  #> $maximum #>     f  #> 0.648  #>"},{"path":"https://anespinosa.github.io/netmem/reference/edgelist_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform an edgelist to a matrix — edgelist_to_matrix","title":"Transform an edgelist to a matrix — edgelist_to_matrix","text":"Transform edgelist matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/edgelist_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform an edgelist to a matrix — edgelist_to_matrix","text":"","code":"edgelist_to_matrix(   E,   digraph = TRUE,   label = NULL,   label2 = NULL,   bipartite = FALSE )"},{"path":"https://anespinosa.github.io/netmem/reference/edgelist_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform an edgelist to a matrix — edgelist_to_matrix","text":"E edge list digraph Whether matrix directed label vector names nodes label2 vector names different set nodes bipartite Whether matrix bipartite","code":""},{"path":"https://anespinosa.github.io/netmem/reference/edgelist_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform an edgelist to a matrix — edgelist_to_matrix","text":"function transform edgelist matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/edgelist_to_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform an edgelist to a matrix — edgelist_to_matrix","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/edgelist_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform an edgelist to a matrix — edgelist_to_matrix","text":"","code":"A <- matrix(c(   0, 1, 1, 0, 0, 0, 0, 1, 0,   1, 0, 1, 0, 0, 0, 0, 0, 0,   1, 1, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 1, 1, 0, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0,   0, 0, 0, 1, 0, 0, 1, 1, 0,   0, 0, 0, 0, 0, 1, 0, 1, 0,   1, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0 ), byrow = TRUE, ncol = 9) rownames(A) <- letters[1:nrow(A)] colnames(A) <- rownames(A) E <- matrix_to_edgelist(A) edgelist_to_matrix(E, label = c(\"i\"), digraph = FALSE) #>   a b c d e f g h i #> a 0 1 1 0 0 0 0 1 0 #> b 1 0 1 0 0 0 0 0 0 #> c 1 1 0 0 0 0 0 0 0 #> d 0 0 0 0 1 1 0 0 0 #> e 0 0 0 1 0 0 0 0 0 #> f 0 0 0 1 0 0 1 1 0 #> g 0 0 0 0 0 1 0 1 0 #> h 1 0 0 0 0 1 1 0 0 #> i 0 0 0 0 0 0 0 0 0"},{"path":"https://anespinosa.github.io/netmem/reference/ego_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Ego network — ego_net","title":"Ego network — ego_net","text":"Submatrix ego's neighbourhoods","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ego_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ego network — ego_net","text":"","code":"ego_net(   A,   ego = NULL,   bipartite = FALSE,   addEgo = FALSE,   select = c(\"all\", \"in\", \"out\") )"},{"path":"https://anespinosa.github.io/netmem/reference/ego_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ego network — ego_net","text":"symmetric matrix object ego Name ego matrix bipartite Whether matrix two-mode network addEgo Whether retain ego submatrix select Whether consider sender receiver ties ego (), incoming ties (), outgoing ties (). default, .","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ego_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ego network — ego_net","text":"function returns redundancy, effective size efficincy measures (Burt, 1992).","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ego_net.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ego network — ego_net","text":"Burt, R.S., 1992. Structural Holes: Social Structure Competition. Harvard University Press, Cambridge. Borgatti, S., 1997. Unpacking Burt's redundancy measure. Connections, 20(1): 35-38. doi: http://www.analytictech.com/connections/v20(1)/holes.htm","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ego_net.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ego network — ego_net","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ego_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ego network — ego_net","text":"","code":"A <- matrix(c(   0, 1, 0, 0, 1, 1, 1,   1, 0, 0, 1, 0, 0, 1,   0, 0, 0, 0, 0, 0, 1,   0, 1, 0, 0, 0, 0, 1,   1, 0, 0, 0, 0, 0, 1,   1, 0, 0, 0, 0, 0, 1,   1, 1, 1, 1, 1, 1, 0 ), ncol = 7, byrow = TRUE) rownames(A) <- letters[1:nrow(A)] colnames(A) <- letters[1:ncol(A)] ego_net(A, ego = \"g\") #>   a b c d e f #> a 0 1 0 0 1 1 #> b 1 0 0 1 0 0 #> c 0 0 0 0 0 0 #> d 0 1 0 0 0 0 #> e 1 0 0 0 0 0 #> f 1 0 0 0 0 0"},{"path":"https://anespinosa.github.io/netmem/reference/ei_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Krackhardt and Stern's E-I index — ei_index","title":"Krackhardt and Stern's E-I index — ei_index","text":"index proposed Krackhardt Stern (1988) distinguish relative prevalence within-group ties. measure can interpreted homophily network level.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ei_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Krackhardt and Stern's E-I index — ei_index","text":"","code":"ei_index(A, mixed = TRUE, att = NULL)"},{"path":"https://anespinosa.github.io/netmem/reference/ei_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Krackhardt and Stern's E-I index — ei_index","text":"symmetric matrix object mixed Whether matrix provided already mixed matrix att Categorical attribute nodes","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ei_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Krackhardt and Stern's E-I index — ei_index","text":"Numerical value E-index.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ei_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Krackhardt and Stern's E-I index — ei_index","text":"","code":"set.seed(18051889) n <- 100 A <- matrix(c(rbinom(n, 1, 0.5)),   ncol = sqrt(n), nrow = sqrt(n), byrow = TRUE ) rownames(A) <- letters[1:nrow(A)] colnames(A) <- letters[1:ncol(A)]  att <- rbinom(sqrt(n), 3, 0.5) ei_index(A, mixed = FALSE, att = att) #> [1] 0.05263158"},{"path":"https://anespinosa.github.io/netmem/reference/expand_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand Matrix — expand_matrix","title":"Expand Matrix — expand_matrix","text":"Expand Matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/expand_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand Matrix — expand_matrix","text":"","code":"expand_matrix(A, label = NULL, loops = FALSE, normalize = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/expand_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand Matrix — expand_matrix","text":"square matrix label Duplicated labels expand matrix loops Whether loops retained normalize Whether normalize matrix considering fractional counting per group","code":""},{"path":"https://anespinosa.github.io/netmem/reference/expand_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand Matrix — expand_matrix","text":"Return expanded matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/expand_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Expand Matrix — expand_matrix","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/expand_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand Matrix — expand_matrix","text":"","code":"A <- matrix(c(   0, 1, 1,   0, 0, 1,   1, 0, 0 ), byrow = TRUE, ncol = 3, nrow = 3) rownames(A) <- letters[1:NROW(A)] colnames(A) <- rownames(A) label <- sort(rep(rownames(A), 2)) expand_matrix(A, label, loops = FALSE, normalize = TRUE) #>   [,1] [,2] [,3] [,4] [,5] [,6] #> a  0.0  0.0  0.5  0.5  0.5  0.5 #> a  0.0  0.0  0.5  0.5  0.5  0.5 #> b  0.0  0.0  0.0  0.0  0.5  0.5 #> b  0.0  0.0  0.0  0.0  0.5  0.5 #> c  0.5  0.5  0.0  0.0  0.0  0.0 #> c  0.5  0.5  0.0  0.0  0.0  0.0"},{"path":"https://anespinosa.github.io/netmem/reference/extract_component.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract components — extract_component","title":"Extract components — extract_component","text":"function extract matrix different components","code":""},{"path":"https://anespinosa.github.io/netmem/reference/extract_component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract components — extract_component","text":"","code":"extract_component(A, maximum = TRUE, position = NULL)"},{"path":"https://anespinosa.github.io/netmem/reference/extract_component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract components — extract_component","text":"matrix maximum Whether extract maximum component position Whether extract component ith size position","code":""},{"path":"https://anespinosa.github.io/netmem/reference/extract_component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract components — extract_component","text":"matrix list matrices required components","code":""},{"path":"https://anespinosa.github.io/netmem/reference/extract_component.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract components — extract_component","text":"Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/extract_component.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract components — extract_component","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/extract_component.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract components — extract_component","text":"","code":"A <- FIFAex$Matrix rownames(A) <- FIFAex$label colnames(A) <- rownames(A) extract_component(A, maximum = TRUE) #>                      IFAB FIFA British Associations CAS WADA Countries #> IFAB                    0    1                    1   0    0         0 #> FIFA                    1    0                    1   1    1         1 #> British Associations    1    1                    0   0    0         0 #> CAS                     0    1                    0   0    1         0 #> WADA                    0    1                    0   1    0         0 #> Countries               0    1                    0   0    0         0 extract_component(A, maximum = FALSE, position = 2) #>                Olympics Games #> Olympics Games              0"},{"path":"https://anespinosa.github.io/netmem/reference/fractional_approach.html","id":null,"dir":"Reference","previous_headings":"","what":"Fractional approach — fractional_approach","title":"Fractional approach — fractional_approach","text":"Matrix transformation incidence matrices citation networks, fractional counting co-citation fractional counting bibliographic coupling","code":""},{"path":"https://anespinosa.github.io/netmem/reference/fractional_approach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fractional approach — fractional_approach","text":"","code":"fractional_approach(   A1,   A2,   approach = c(\"citation\", \"cocitation\", \"bcoupling\") )"},{"path":"https://anespinosa.github.io/netmem/reference/fractional_approach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fractional approach — fractional_approach","text":"A1 incidence matrix (e.g. paper authors) A2 incidence matrix (e.g. author paper) approach Character string, “citation”, “cocitation” “bcoupling”","code":""},{"path":"https://anespinosa.github.io/netmem/reference/fractional_approach.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fractional approach — fractional_approach","text":"Return type \"citation network\"","code":""},{"path":"https://anespinosa.github.io/netmem/reference/fractional_approach.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fractional approach — fractional_approach","text":"Batagelj, V. (2020). Analysis Southern women network using fractional approach. Social Networks, 68, 229-236 https://doi.org/10.1016/j.socnet.2021.08.001 Batagelj, V., & Cerinšek, M. (2013). bibliographic networks. Scientometrics, 96(3), 845–864. https://doi.org/10.1007/s11192-012-0940-1","code":""},{"path":"https://anespinosa.github.io/netmem/reference/fractional_approach.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fractional approach — fractional_approach","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/fractional_approach.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fractional approach — fractional_approach","text":"","code":"A1 <- matrix(c(   1, 0, 0, 0,   0, 1, 0, 0,   0, 1, 1, 1,   0, 0, 0, 0,   0, 0, 0, 1 ), byrow = TRUE, ncol = 4)  A2 <- matrix(c(   1, 1, 1, 0, 0,   0, 0, 1, 0, 0,   0, 0, 1, 1, 0,   0, 0, 0, 1, 1 ), byrow = TRUE, ncol = 5)  fractional_approach(A1, A2) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    1    0    0 #> [2,]    1    1    1    0    0 #> [3,]    1    1    6    4    2 #> [4,]    0    0    4    5    3 #> [5,]    0    0    2    3    2"},{"path":"https://anespinosa.github.io/netmem/reference/gen_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized degree — gen_degree","title":"Generalized degree — gen_degree","text":"Generalized degree centrality one-mode bipartite networks","code":""},{"path":"https://anespinosa.github.io/netmem/reference/gen_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized degree — gen_degree","text":"","code":"gen_degree(   A,   weighted = FALSE,   type = \"out\",   normalized = FALSE,   loops = TRUE,   digraph = TRUE,   alpha = 0.5,   bipartite = FALSE )"},{"path":"https://anespinosa.github.io/netmem/reference/gen_degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized degree — gen_degree","text":"matrix object weighted Whether matrix weighted type Character string, “” (outdegree), “” (indegree) “” (degree) normalized Whether normalize measure one-mode network (Freeman, 1978) bipartite network (Borgatti Everett, 1997) loops Whether diagonal matrix considered digraph Whether  matrix directed undirected alpha Sets alpha parameter generalised measures Opsahl et al. (2010) bipartite Whether matrix bipartite .","code":""},{"path":"https://anespinosa.github.io/netmem/reference/gen_degree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized degree — gen_degree","text":"function returns term 1, 2 3, normalization maximum value specification Everett Borgatti (2020), constraint Burt (1992)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/gen_degree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized degree — gen_degree","text":"Borgatti, S. P., Everett, M. G. (1997). Network analysis 2-mode data. Social Networks, 19(3), 243–269. Freeman, L. C. (1978). Centrality social networks conceptual clarification. Social Networks, 1(3), 215–239. Opsahl, T., Agneessens, F., Skvoretz, J. (2010). Node centrality weighted networks: Generalizing degree shortest paths. Social Networks, 32(3), 245–251.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/gen_degree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized degree — gen_degree","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/gen_degree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized degree — gen_degree","text":"","code":"A3 <- matrix(c(   0, 4, 4, 0, 0, 0,   4, 0, 2, 1, 1, 0,   4, 2, 0, 0, 0, 0,   0, 1, 0, 0, 0, 0,   0, 1, 0, 0, 0, 7,   0, 0, 0, 0, 7, 0 ), byrow = TRUE, ncol = 6)  gen_degree(A3, digraph = FALSE, weighted = TRUE) #> [1] 4.000000 5.656854 3.464102 1.000000 4.000000 2.645751"},{"path":"https://anespinosa.github.io/netmem/reference/gen_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized density — gen_density","title":"Generalized density — gen_density","text":"Generalized density","code":""},{"path":"https://anespinosa.github.io/netmem/reference/gen_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized density — gen_density","text":"","code":"gen_density(   A,   directed = TRUE,   bipartite = FALSE,   loops = FALSE,   weighted = FALSE,   multilayer = FALSE )"},{"path":"https://anespinosa.github.io/netmem/reference/gen_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized density — gen_density","text":"symmetric incidence matrix object directed Whether matrix directed bipartite Whether matrix bipartite loops Whether consider loops weighted Whether matrix weighted multilayer Whether matrix multilayer (.e., multiplex /multilevel)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/gen_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized density — gen_density","text":"function returns density matrix(es)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/gen_density.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized density — gen_density","text":"Wasserman, S., Faust, K. (1994). Social Network Analysis: Methods Applications. Cambridge: Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/gen_density.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized density — gen_density","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/gen_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized density — gen_density","text":"","code":"# A bipartite matrix B <- matrix(c(   1, 1, 0,   0, 0, 1,   0, 1, 1,   0, 0, 1 ), byrow = TRUE, ncol = 3) gen_density(B, bipartite = TRUE) #> [1] 0.3333333  # A multilevel network A1 <- matrix(c(   0, 1, 0, 0, 1,   1, 0, 0, 1, 1,   0, 0, 0, 1, 1,   0, 1, 1, 0, 1,   1, 1, 1, 1, 0 ), byrow = TRUE, ncol = 5)  B1 <- matrix(c(   1, 0, 0,   1, 1, 0,   0, 1, 0,   0, 1, 0,   0, 1, 1 ), byrow = TRUE, ncol = 3)  A2 <- matrix(c(   0, 1, 1,   1, 0, 0,   1, 0, 0 ), byrow = TRUE, nrow = 3)  B2 <- matrix(c(   1, 1, 0, 0,   0, 0, 1, 0,   0, 0, 1, 1 ), byrow = TRUE, ncol = 4)  A3 <- matrix(c(   0, 1, 3, 1,   1, 0, 0, 0,   3, 0, 0, 5,   1, 0, 5, 0 ), byrow = TRUE, ncol = 4)  matrices <- list(A1, B1, A2, B2, A3) gen_density(matrices, multilayer = TRUE) #> Warning: The matrix in [[5]] is valued #> $`Density of matrix [[1]]` #> [1] 0.7 #>  #> $`Density of matrix [[2]]` #> [1] 0.4666667 #>  #> $`Density of matrix [[3]]` #> [1] 0.6666667 #>  #> $`Density of matrix [[4]]` #> [1] 0.4166667 #>  #> $`Density of matrix [[5]]` #> [1] NA #>   # A multiplex network A <- matrix(c(   0, 1, 3, 6, 4,   2, 0, 4, 5, 2,   4, 1, 0, 6, 1,   5, 6, 3, 0, 6,   1, 1, 2, 3, 0 ), byrow = TRUE, ncol = 5) gen_density(A, multilayer = TRUE) #> $`Density of matrix [[1]]` #> [1] 0.3 #>  #> $`Density of matrix [[2]]` #> [1] 0.2 #>  #> $`Density of matrix [[3]]` #> [1] 0.2 #>  #> $`Density of matrix [[4]]` #> [1] 0.1 #>  #> $`Density of matrix [[5]]` #> [1] 0.1 #>  #> $`Density of matrix [[6]]` #> [1] 0.1 #>"},{"path":"https://anespinosa.github.io/netmem/reference/heterogeneity.html","id":null,"dir":"Reference","previous_headings":"","what":"Blau's and IQV index — heterogeneity","title":"Blau's and IQV index — heterogeneity","text":"index used Blau (1977) distinguish relative prevalence within-group ties. measure can interpreted heterogeneity network level.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/heterogeneity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blau's and IQV index — heterogeneity","text":"","code":"heterogeneity(att, normalized = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/heterogeneity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blau's and IQV index — heterogeneity","text":"att Categorical attribute nodes normalized Whether return IQV index","code":""},{"path":"https://anespinosa.github.io/netmem/reference/heterogeneity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blau's and IQV index — heterogeneity","text":"Numerical value Blau index. normalized = TRUE, function also return IQV index.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/heterogeneity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Blau's and IQV index — heterogeneity","text":"Agresti, . Agresti, B. (1978). Statistical Analysis Qualitative Variation. Sociological Methodology, 9, 204-237. doi: https://doi.org/10.2307/270810 Blau, P. M. (1977). Inequality heterogeneity. New York: Free Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/heterogeneity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blau's and IQV index — heterogeneity","text":"","code":"a <- rep(1:10, 10) heterogeneity(a, normalized = TRUE) #> $blau #>   1  #> 0.9  #>  #> $iqv #> 1  #> 1  #>   a <- rep(1:2, 10) heterogeneity(a, normalized = TRUE) #> $blau #>   1  #> 0.5  #>  #> $iqv #> 1  #> 1  #>"},{"path":"https://anespinosa.github.io/netmem/reference/hypergraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Hypergraphs — hypergraph","title":"Hypergraphs — hypergraph","text":"Hypergraph consist set objects collection subsets objects, object belongs least one subset, subset empy (Berge, 1989)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/hypergraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hypergraphs — hypergraph","text":"","code":"hypergraph(A, dual = TRUE, both = TRUE)"},{"path":"https://anespinosa.github.io/netmem/reference/hypergraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hypergraphs — hypergraph","text":"incidence matrix. dual Whether return dual hypergraph (rever role pointes edges) Whether return hypergraph dual hypergraph","code":""},{"path":"https://anespinosa.github.io/netmem/reference/hypergraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hypergraphs — hypergraph","text":"function returns adjacent list subsets entities hypergraph.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/hypergraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hypergraphs — hypergraph","text":"Berge, C. (1973). Graphs hypergraphs.Amsterdam: North-Holland. Berge, C. (1989). Hypergraphs: Combinatorics finite sets. Amsterdam: North-Holland. Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/hypergraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hypergraphs — hypergraph","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/hypergraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hypergraphs — hypergraph","text":"","code":"A <- matrix(c(   1, 0, 1,   0, 1, 0,   0, 1, 1,   0, 0, 1,   1, 1, 1,   1, 1, 0 ), byrow = TRUE, ncol = 3) colnames(A) <- letters[1:ncol(A)] rownames(A) <- letters[(ncol(A) + 1):(nrow(A) + ncol(A))] hypergraph(A, both = TRUE) #> $hypergraph #> $hypergraph$d #> [1] \"a\" \"c\" #>  #> $hypergraph$e #> [1] \"b\" #>  #> $hypergraph$f #> [1] \"b\" \"c\" #>  #> $hypergraph$g #> [1] \"c\" #>  #> $hypergraph$h #> [1] \"a\" \"b\" \"c\" #>  #> $hypergraph$i #> [1] \"a\" \"b\" #>  #>  #> $dual_hypergraph #> $dual_hypergraph$a #> [1] \"d\" \"h\" \"i\" #>  #> $dual_hypergraph$b #> [1] \"e\" \"f\" \"h\" \"i\" #>  #> $dual_hypergraph$c #> [1] \"d\" \"f\" \"g\" \"h\" #>  #>"},{"path":"https://anespinosa.github.io/netmem/reference/ind_rand_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Independent random matrix — ind_rand_matrix","title":"Independent random matrix — ind_rand_matrix","text":"function creates random matrices following uniform probability space networks exactly m fixed number edges (Moreno Jennings, 1938; Rapoport, 1948; Solomonoff Rapoport, 1951; Erdos Renyi, 1959) following probability formation ties (Gilbert, 1959) assuming ties independency.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ind_rand_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Independent random matrix — ind_rand_matrix","text":"","code":"ind_rand_matrix(   n,   m = NULL,   type = c(\"edges\", \"probability\"),   digraph = TRUE,   loops = FALSE,   l = NULL,   p = NULL,   trials = 1,   multilevel = FALSE )"},{"path":"https://anespinosa.github.io/netmem/reference/ind_rand_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Independent random matrix — ind_rand_matrix","text":"n number nodes first set m  number nodes second set type model assumes fixed number edges model (.k.. G(n,m)) (default) probability model (.k.. G(n,p)) digraph Whether matrix symmetric loops Whether expect nonzero elements diagonal matrix l number ties expected edges (.k.. G(n,m)) model p probability ties expected probability (.k.. G(n,p)) model. parameter `p` specified, uniform distribution considered (p=0.5). trials Whether add counting numbers probability (.k.. G(n,p)) model multilevel Whether return meta-matrix represent multilevel network","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ind_rand_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Independent random matrix — ind_rand_matrix","text":"function return counts dyad census.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ind_rand_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Independent random matrix — ind_rand_matrix","text":"fixed model often called G(n,m) graph 'n' nodes 'm' edges, 'm' edges chosen uniformly randomly set possible ties. probability model known G(n,p) graph, matrix 'n' nodes, tie, probability present matrix 'p'. simplest models follow conditional uniform distribution place nonnull probability subset networks distinctive characteristics corresponding observed networks - example, simulating matrix based number ties observed network.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ind_rand_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Independent random matrix — ind_rand_matrix","text":"Erdos, P. Renyi, . (1959). random graphs. Publicationes Mathematicae 6, 290–297. Gilbert, N. (1959). Random Graphs. Annals Mathematical Statistics, 30(4): 1141-1144. Moreno, J. Jennings, H. (1938). Statistics social configurations. Sociometry, 1(3/4):342–374. Rapoport, . (1948). Cycle distributions random nets. Bulletin Mathematical Biology, 10(3):145–157. Solomonoff, R. Rapoport, . (1951). Connectivity random nets. Bulletin Mathematical Biology, 13:107–117.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ind_rand_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Independent random matrix — ind_rand_matrix","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/ind_rand_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Independent random matrix — ind_rand_matrix","text":"","code":"set.seed(18051889) ind_rand_matrix(5, type = \"edges\", l = 3, digraph = TRUE, loops = TRUE) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    0    0    0 ind_rand_matrix(5, type = \"probability\") #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    1    0 #> [2,]    1    0    1    0    1 #> [3,]    0    1    0    1    1 #> [4,]    0    0    0    0    0 #> [5,]    0    1    1    1    0 ind_rand_matrix(n = 5, m = 2, p = 0.20, type = \"probability\", multilevel = TRUE) #>    n1 n2 n3 n4 n5 m1 m2 #> n1  0  1  0  0  0  0  1 #> n2  0  0  1  1  0  0  0 #> n3  0  0  0  0  0  0  0 #> n4  0  0  0  0  0  0  0 #> n5  0  1  1  0  0  0  0 #> m1  0  0  0  0  0  0  0 #> m2  1  0  0  0  0  0  0"},{"path":"https://anespinosa.github.io/netmem/reference/jaccard.html","id":null,"dir":"Reference","previous_headings":"","what":"Jaccard similarity — jaccard","title":"Jaccard similarity — jaccard","text":"Jaccard similarity identifies changes ties two matrices.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/jaccard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jaccard similarity — jaccard","text":"","code":"jaccard(   A,   B,   directed = TRUE,   diag = FALSE,   coparticipation = FALSE,   bipartite = FALSE )"},{"path":"https://anespinosa.github.io/netmem/reference/jaccard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jaccard similarity — jaccard","text":"Binary matrix B Binary matrix B directed Whether matrix symmetric diag Whether diagonal considered coparticipation Select nodes co-participate matrices bipartite Whether matrix incidence","code":""},{"path":"https://anespinosa.github.io/netmem/reference/jaccard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jaccard similarity — jaccard","text":"output : jaccard = Jaccard similarity, proportion = proportion among ties present given observation ties also present matrix, table = table tie changes matrices. coparticipation = TRUE, also: match = number nodes present matrices;  size_matrix1 = size first matrix;  size_matrix2 = size second matrix; coparticipation1 = percentage nodes first matrix also present second matrix; coparticipation2 = percentage nodes second matrix also present first matrix: overlap_actors = Overlap nodes two matrices #' coparticipation = TRUE bipartite = TRUE, also: matchM1 = number nodes first 'mode' present matrices; matchM2 = number nodes second 'mode' present matrices;  size_matrix1_M1 = number nodes first 'mode' first matrix;  size_matrix1_M2 = number nodes second 'mode' first matrix;  size_matrix2_M1 = number nodes first 'mode' second matrix;  size_matrix2_M2 = number nodes second 'mode' second matrix; coparticipation1_M2 = percentage nodes first 'mode' first matrix present second matrix. coparticipation1_M2 = percentage nodes second 'mode' first matrix present second matrix. coparticipation2_M1 = percentage nodes first 'mode' second matrix present first matrix.  coparticipation2_M2 = percentage nodes second 'mode' second matrix present first matrix. overlap_actors_M1 = Overlap two matrices (nodes first 'mode') overlap_actors_M2 = Overlap two matrices (nodes second 'mode')","code":""},{"path":"https://anespinosa.github.io/netmem/reference/jaccard.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Jaccard similarity — jaccard","text":"Batagelj, V., Bren, M. (1995). Comparing resemblance measures. Journal Classification 12, 73–90.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/jaccard.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Jaccard similarity — jaccard","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/jaccard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jaccard similarity — jaccard","text":"","code":"A <- matrix(c(   0, 1, 1, 0,   1, 0, 0, 0,   1, 0, 0, 0,   0, 0, 1, 0 ), byrow = TRUE, ncol = 4) B <- matrix(c(   0, 1, 1, 0,   1, 0, 0, 0,   1, 0, 0, 0,   0, 0, 0, 0 ), byrow = TRUE, ncol = 4) jaccard(A, B, directed = TRUE) #> $jaccard #> [1] 0.8 #>  #> $proportion #> [1] 0.8 #>  #> $table #>       B #> A      0 1 <NA> #>   0    7 0    0 #>   1    1 4    0 #>   <NA> 0 0    0 #>"},{"path":"https://anespinosa.github.io/netmem/reference/k_core.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized k-core — k_core","title":"Generalized k-core — k_core","text":"Generalized k-core undirected, directed, weighted multilevel networks","code":""},{"path":"https://anespinosa.github.io/netmem/reference/k_core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized k-core — k_core","text":"","code":"k_core(   A,   B1 = NULL,   multilevel = FALSE,   type = \"in\",   digraph = FALSE,   loops = FALSE,   weighted = FALSE,   alpha = 1 )"},{"path":"https://anespinosa.github.io/netmem/reference/k_core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized k-core — k_core","text":"matrix object. B1 incidence matrix multilevel networks. multilevel Whether measure k-core multilevel networks. type Character string, “” (outdegree), “” (indegree) “” (degree) digraph Whether  matrix directed undirected loops Whether diagonal matrix considered weighted Whether measure k-core valued matrices alpha Sets alpha parameter generalised measures Opsahl et al. (2010)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/k_core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized k-core — k_core","text":"function return k-core.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/k_core.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized k-core — k_core","text":"Batagelj, V., & Zaveršnik, M. (2011). Fast algorithms determining (generalized) core groups social networks. Advances Data Analysis Classification, 5(2), 129–145. https://doi.org/10.1007/s11634-010-0079-y Eidsaa, M., & Almaas, E. (2013). s-core network decomposition: generalization $k$-core analysis weighted networks. Physical Review E, 88(6), 062819. https://doi.org/10.1103/PhysRevE.88.062819 Seidman S (1983).  'Network structure minimum degree'.  Social Networks, 5, 269-287.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/k_core.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized k-core — k_core","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/k_core.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized k-core — k_core","text":"","code":"A1 <- matrix(c(   0, 1, 0, 0, 0,   1, 0, 0, 1, 0,   0, 0, 0, 1, 0,   0, 1, 1, 0, 1,   0, 0, 0, 1, 0 ), byrow = TRUE, ncol = 5) B1 <- matrix(c(   1, 0, 0,   1, 1, 0,   0, 1, 0,   0, 1, 0,   0, 1, 1 ), byrow = TRUE, ncol = 3)  k_core(A1, B1, multilevel = TRUE) #> [1] 1 2 1 2 2"},{"path":"https://anespinosa.github.io/netmem/reference/kp_reciprocity.html","id":null,"dir":"Reference","previous_headings":"","what":"Reciprocity of Katz and Powell — kp_reciprocity","title":"Reciprocity of Katz and Powell — kp_reciprocity","text":"Reciprocity Katz Powell","code":""},{"path":"https://anespinosa.github.io/netmem/reference/kp_reciprocity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reciprocity of Katz and Powell — kp_reciprocity","text":"","code":"kp_reciprocity(G, fixed = FALSE, d = NULL, dichotomic = TRUE)"},{"path":"https://anespinosa.github.io/netmem/reference/kp_reciprocity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reciprocity of Katz and Powell — kp_reciprocity","text":"G symmetric matrix object. fixed Whether choices fixed d Numeric value number fixed choices. dichotomic Whether matrix weighted binary","code":""},{"path":"https://anespinosa.github.io/netmem/reference/kp_reciprocity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reciprocity of Katz and Powell — kp_reciprocity","text":"function gives measurment tendency toward reciprocation choices.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/kp_reciprocity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reciprocity of Katz and Powell — kp_reciprocity","text":"Katz, L. Powell, J.H. (1955). \"Measurement tendency toward reciprocation choice.\" Sociometry, 18:659-665.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/kp_reciprocity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reciprocity of Katz and Powell — kp_reciprocity","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/kp_reciprocity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reciprocity of Katz and Powell — kp_reciprocity","text":"","code":"data(krackhardt_friends) kp_reciprocity(krackhardt_friends, fixed = TRUE, d = 5) #> [1] 0.2507937"},{"path":"https://anespinosa.github.io/netmem/reference/krackhardt_friends.html","id":null,"dir":"Reference","previous_headings":"","what":"Krackhardt friends — krackhardt_friends","title":"Krackhardt friends — krackhardt_friends","text":"Friendship network relations measured Krackhardt's high-tech managers.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/krackhardt_friends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Krackhardt friends — krackhardt_friends","text":"","code":"data(krackhardt_friends)"},{"path":"https://anespinosa.github.io/netmem/reference/krackhardt_friends.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Krackhardt friends — krackhardt_friends","text":"21 x 21 directed matrix managers","code":""},{"path":"https://anespinosa.github.io/netmem/reference/krackhardt_friends.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Krackhardt friends — krackhardt_friends","text":"Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/lazega_lawfirm.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazega law firm — lazega_lawfirm","title":"Lazega law firm — lazega_lawfirm","text":"data part study carried Northeastern US corporate law firm, referred SG&R, 1988-1991 New England. data collected Emmanuel Lazega (2001). multiplex network attorneys (partners associates) firm. includes (among others) measurements networks among 71 attorneys (partners associates) firm, .e. strong-coworker network, advice network, friendship network, indirect control networks.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/lazega_lawfirm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazega law firm — lazega_lawfirm","text":"","code":"data(lazega_lawfirm)"},{"path":"https://anespinosa.github.io/netmem/reference/lazega_lawfirm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lazega law firm — lazega_lawfirm","text":"Three 71 X 71 matrices: cowork matrix indicating \"cowork\" relationships among attorneys, based work together cases professional activities. advice matrix indicating \"advice\" relationships, matrix shows attorneys went professional advice. friends matrix indicating \"friends\" relationships, showing social connections outside work. attributes data frame attributes actors, including:","code":""},{"path":"https://anespinosa.github.io/netmem/reference/lazega_lawfirm.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Lazega law firm — lazega_lawfirm","text":"Lazega, Emmanuel (2001) Collegial Phenomenon: Social Mechanisms Cooperation Among Peers Corporate Law Partnership. Oxford University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_adjlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a matrix to an adjacency list — matrix_adjlist","title":"Transform a matrix to an adjacency list — matrix_adjlist","text":"Transform matrix adjacency list","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_adjlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a matrix to an adjacency list — matrix_adjlist","text":"","code":"matrix_adjlist(A)"},{"path":"https://anespinosa.github.io/netmem/reference/matrix_adjlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a matrix to an adjacency list — matrix_adjlist","text":"matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_adjlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a matrix to an adjacency list — matrix_adjlist","text":"function transform matrix adjacency list","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_adjlist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform a matrix to an adjacency list — matrix_adjlist","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_adjlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a matrix to an adjacency list — matrix_adjlist","text":"","code":"A <- matrix(c(   0, 1, 1, 0, 0, 0, 0, 1, 0,   1, 0, 1, 0, 0, 0, 0, 0, 0,   1, 1, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 1, 1, 0, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0,   0, 0, 0, 1, 0, 0, 1, 1, 0,   0, 0, 0, 0, 0, 1, 0, 1, 0,   1, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0 ), byrow = TRUE, ncol = 9) rownames(A) <- letters[1:nrow(A)] colnames(A) <- rownames(A) matrix_adjlist(A) #> $a #> [1] \"b\" \"c\" \"h\" #>  #> $b #> [1] \"a\" \"c\" #>  #> $c #> [1] \"a\" \"b\" #>  #> $d #> [1] \"e\" \"f\" #>  #> $e #> [1] \"d\" #>  #> $f #> [1] \"d\" \"g\" \"h\" #>  #> $g #> [1] \"f\" \"h\" #>  #> $h #> [1] \"a\" \"f\" \"g\" #>  #> $i #> character(0) #>"},{"path":"https://anespinosa.github.io/netmem/reference/matrix_projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Unipartite projections — matrix_projection","title":"Unipartite projections — matrix_projection","text":"Two-mode networks can represented ('projected') one-mode networks.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unipartite projections — matrix_projection","text":"","code":"matrix_projection(A, B = NULL, digraph = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/matrix_projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unipartite projections — matrix_projection","text":"first matrix object B second matrix object digraph Whether matrix directed ","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unipartite projections — matrix_projection","text":"function return list matrices two projections original matrix.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_projection.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Unipartite projections — matrix_projection","text":"Davis, Allison; Gardner, Burleigh B. Mary. R. Gardner (1941). Deep South: Social Anthropological Study Caste Class. University Chicago Press, Chicago. Breiger, Ronald L. (1976). Duality Persons Groups, 53(2), 181-190 doi: https://doi.org/10.2307/2576011 Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_projection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Unipartite projections — matrix_projection","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_projection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unipartite projections — matrix_projection","text":"","code":"A <- matrix(c(   2, 0, 2,   1, 1, 0,   0, 3, 3,   0, 2, 2,   0, 0, 1 ), byrow = TRUE, ncol = 3) matrix_projection(A) #> $matrix1 #>      [,1] [,2] [,3] #> [1,]    5    1    4 #> [2,]    1   14   13 #> [3,]    4   13   18 #>  #> $matrix2 #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    8    2    6    4    2 #> [2,]    2    2    3    2    0 #> [3,]    6    3   18   12    3 #> [4,]    4    2   12    8    2 #> [5,]    2    0    3    2    1 #>   A <- matrix(c(   0, 0, 0, 0, 1,   1, 0, 0, 0, 0,   1, 1, 0, 0, 0,   0, 1, 1, 1, 1,   0, 0, 1, 0, 0,   0, 0, 1, 1, 0 ), byrow = TRUE, ncol = 5)  B <- matrix(c(   0, 0, 0, 0, 1,   1, 0, 0, 0, 0,   1, 0, 0, 0, 0,   0, 1, 0, 0, 0,   0, 0, 1, 0, 0,   0, 0, 1, 0, 0 ), byrow = TRUE, ncol = 5) matrix_projection(A, B, digraph = TRUE) #> $matrix1 #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    2    1    0    0    0 #> [2,]    0    1    1    1    1 #> [3,]    0    0    2    1    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    1 #>  #> $matrix2 #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    0    0    1    0    0 #> [2,]    0    1    1    0    0    0 #> [3,]    0    1    1    0    0    0 #> [4,]    0    0    1    1    0    0 #> [5,]    0    0    0    1    1    1 #> [6,]    0    0    0    1    1    1 #>"},{"path":"https://anespinosa.github.io/netmem/reference/matrix_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix report — matrix_report","title":"Matrix report — matrix_report","text":"primary matrix used social network analysis adjacency matrix sociomatrix, incidence matrix.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix report — matrix_report","text":"","code":"matrix_report(A)"},{"path":"https://anespinosa.github.io/netmem/reference/matrix_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix report — matrix_report","text":"matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix report — matrix_report","text":"function return report characteristics matrix.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_report.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Matrix report — matrix_report","text":"Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_report.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Matrix report — matrix_report","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix report — matrix_report","text":"","code":"A <- matrix(c(   1, 1, 0, 0, -1,   1, 0, 0, 1, 1,   0, 0, NA, 1, 1,   0, 1, 1, 0, 1,   1, 1, 1, 1, 0 ), byrow = TRUE, ncol = 5)  B <- matrix(c(   1, 0, 0,   1, 1, 0,   0, NA, 0,   0, 1, 0,   0, 1, 1 ), byrow = TRUE, ncol = 3) matrix_report(A) #> The matrix A might have the following characteristics: #> --> The vectors of the matrix are `numeric` #> --> No names assigned to the rows of the matrix #> --> No names assigned to the columns of the matrix #> --> The matrix has negative elements (network is signed) #> --> The matrix has NA elements #> --> Matrix is asymmetric (network is directed) #> --> The main diagonal is nonzero (the network has loops) #> --> The matrix is square, 5 by 5  #>      nodes arcs #> [1,]     5   13 matrix_report(B) #> The matrix A might have the following characteristics: #> --> The vectors of the matrix are `numeric` #> --> No names assigned to the rows of the matrix #> --> No names assigned to the columns of the matrix #> --> The matrix has NA elements #> --> The matrix is rectangular, 3 by 5  #>      nodes_rows nodes_columns incidence_lines #> [1,]          3             5               6"},{"path":"https://anespinosa.github.io/netmem/reference/matrix_to_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a square matrix to an edge-list — matrix_to_edgelist","title":"Transform a square matrix to an edge-list — matrix_to_edgelist","text":"Transform square matrix edge-list","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_to_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a square matrix to an edge-list — matrix_to_edgelist","text":"","code":"matrix_to_edgelist(A, digraph = FALSE, valued = FALSE, loops = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/matrix_to_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a square matrix to an edge-list — matrix_to_edgelist","text":"square matrix digraph Whether matrix directed valued Add third columns valued relationship loops Whether loops retained ","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_to_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a square matrix to an edge-list — matrix_to_edgelist","text":"function transform matrix edgelist","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_to_edgelist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform a square matrix to an edge-list — matrix_to_edgelist","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/matrix_to_edgelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a square matrix to an edge-list — matrix_to_edgelist","text":"","code":"A <- matrix(c(   0, 2, 1,   1, 0, 0,   1, 0, 1 ), byrow = TRUE, ncol = 3) matrix_to_edgelist(A, digraph = TRUE, valued = TRUE, loops = TRUE) #>      [,1] [,2] [,3] #> [1,] \"2\"  \"1\"  \"1\"  #> [2,] \"3\"  \"1\"  \"1\"  #> [3,] \"1\"  \"2\"  \"2\"  #> [4,] \"1\"  \"3\"  \"1\"  #> [5,] \"3\"  \"3\"  \"1\""},{"path":"https://anespinosa.github.io/netmem/reference/meta_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta matrix for multilevel networks — meta_matrix","title":"Meta matrix for multilevel networks — meta_matrix","text":"Meta matrix multilevel networks","code":""},{"path":"https://anespinosa.github.io/netmem/reference/meta_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta matrix for multilevel networks — meta_matrix","text":"","code":"meta_matrix(A1, B1, A2 = NULL, B2 = NULL, A3 = NULL, B3 = NULL)"},{"path":"https://anespinosa.github.io/netmem/reference/meta_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meta matrix for multilevel networks — meta_matrix","text":"A1 square matrix lowest level B1 incidence matrix ties nodes first level nodes second level A2 square matrix second level B2 incidence matrix ties nodes second level nodes third level A3 square matrix third level B3 incidence matrix ties nodes third level nodes first level","code":""},{"path":"https://anespinosa.github.io/netmem/reference/meta_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Meta matrix for multilevel networks — meta_matrix","text":"Return meta matrix multilevel networks","code":""},{"path":"https://anespinosa.github.io/netmem/reference/meta_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Meta matrix for multilevel networks — meta_matrix","text":"Carley, K. M. (2002). Smart agents organizations future. : Leah Lievrouw & Sonia Livingstone (Eds.), Handbook New Media (pp. 206-220). Thousand Oaks, CA, Sage. Krackhardt, D., & Carley, K. M. (1998). PCANS model structure organizations (pp. 113- 119). Pittsburgh, Pa, USA: Carnegie Mellon University, Institute Complex Engineered Systems.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/meta_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Meta matrix for multilevel networks — meta_matrix","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/meta_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meta matrix for multilevel networks — meta_matrix","text":"","code":"A1 <- matrix(c(   0, 1, 0, 0, 0,   1, 0, 0, 1, 0,   0, 0, 0, 1, 0,   0, 1, 1, 0, 1,   0, 0, 0, 1, 0 ), byrow = TRUE, ncol = 5)  B1 <- matrix(c(   1, 0, 0,   1, 1, 0,   0, 1, 0,   0, 1, 0,   0, 1, 1 ), byrow = TRUE, ncol = 3)  A2 <- matrix(c(   0, 1, 1,   1, 0, 0,   1, 0, 0 ), byrow = TRUE, nrow = 3)  B2 <- matrix(c(   1, 1, 0, 0,   0, 0, 1, 0,   0, 0, 1, 1 ), byrow = TRUE, ncol = 4)  A3 <- matrix(c(   0, 1, 1, 1,   1, 0, 0, 0,   1, 0, 0, 1,   1, 0, 1, 0 ), byrow = TRUE, ncol = 4)  B3 <- matrix(c(   1, 0, 0, 0, 0,   0, 1, 0, 1, 0,   0, 0, 0, 0, 0,   0, 0, 0, 0, 0 ), byrow = TRUE, ncol = 5)  rownames(A1) <- letters[1:nrow(A1)] colnames(A1) <- rownames(A1) rownames(A2) <- letters[nrow(A1) + 1:nrow(A2)] colnames(A2) <- rownames(A2) rownames(B1) <- rownames(A1) colnames(B1) <- colnames(A2) rownames(A3) <- letters[nrow(A1) + nrow(A2) + 1:nrow(A3)] colnames(A3) <- rownames(A3) rownames(B2) <- rownames(A2) colnames(B2) <- colnames(A3) rownames(B3) <- rownames(A3) colnames(B3) <- rownames(A1) meta_matrix(A1, B1, A2, B2, A3, B3) #>   a b c d e f g h i j k l #> a 0 1 0 0 0 1 0 0 1 0 0 0 #> b 1 0 0 1 0 1 1 0 0 1 0 0 #> c 0 0 0 1 0 0 1 0 0 0 0 0 #> d 0 1 1 0 1 0 1 0 0 1 0 0 #> e 0 0 0 1 0 0 1 1 0 0 0 0 #> f 1 1 0 0 0 0 1 1 0 0 0 0 #> g 0 1 1 1 1 1 0 0 0 0 0 0 #> h 0 0 0 0 1 1 0 0 0 0 0 0 #> i 0 0 0 0 0 0 0 0 0 1 1 1 #> j 0 0 0 0 0 0 0 0 1 0 0 0 #> k 0 0 0 0 0 0 0 0 1 0 0 1 #> l 0 0 0 0 0 0 0 0 1 0 1 0"},{"path":"https://anespinosa.github.io/netmem/reference/minmax_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum/maximum overlap — minmax_overlap","title":"Minimum/maximum overlap — minmax_overlap","text":"Two-mode networks can represented ('projected') one-mode networks.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/minmax_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum/maximum overlap — minmax_overlap","text":"","code":"minmax_overlap(A, row = TRUE, min = TRUE)"},{"path":"https://anespinosa.github.io/netmem/reference/minmax_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum/maximum overlap — minmax_overlap","text":"matrix object row Whether consider actors rows matrix (default) column. min Whether extract minimum (default) maximum overlap.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/minmax_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum/maximum overlap — minmax_overlap","text":"function return overlap modes (.k.. actors, nodes, vertices).","code":""},{"path":"https://anespinosa.github.io/netmem/reference/minmax_overlap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Minimum/maximum overlap — minmax_overlap","text":"Morris, S.. (2005). Unified Mathematical Treatment Complex Cascaded Bipartite Networks: Case Collections Journal Papers. Unpub- lished PhD Thesis, Oklahoma State University. Retrieved http://digital.library.okstate.edu/etd/umi-okstate-1334.pdf","code":""},{"path":"https://anespinosa.github.io/netmem/reference/minmax_overlap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Minimum/maximum overlap — minmax_overlap","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/minmax_overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum/maximum overlap — minmax_overlap","text":"","code":"A <- matrix(c(   2, 0, 2,   1, 1, 0,   0, 3, 3,   0, 2, 2,   0, 0, 1 ), byrow = TRUE, ncol = 3) minmax_overlap(A) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    4    1    2    2    1 #> [2,]    1    2    1    1    0 #> [3,]    2    1    6    4    1 #> [4,]    2    1    4    4    1 #> [5,]    1    0    1    1    1"},{"path":"https://anespinosa.github.io/netmem/reference/mix_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixing matrix — mix_matrix","title":"Mixing matrix — mix_matrix","text":"Create mixing matrix node attributes. mixing matrix two-dimensional matrix cross-classifies edges depending values attributes. matrix allowed identifying segregation homophily network level.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/mix_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixing matrix — mix_matrix","text":"","code":"mix_matrix(A, att = NULL)"},{"path":"https://anespinosa.github.io/netmem/reference/mix_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixing matrix — mix_matrix","text":"symmetric matrix object att Categorical attribute nodes","code":""},{"path":"https://anespinosa.github.io/netmem/reference/mix_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixing matrix — mix_matrix","text":"function returns mixing matrix.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/mix_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mixing matrix — mix_matrix","text":"Values diagonal number ties within groups, -diagonal number relations groups.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/mix_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mixing matrix — mix_matrix","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/mix_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixing matrix — mix_matrix","text":"","code":"n <- 100 A <- matrix(c(rbinom(n, 1, 0.5)),   ncol = sqrt(n), nrow = sqrt(n), byrow = TRUE ) rownames(A) <- letters[1:nrow(A)] colnames(A) <- letters[1:ncol(A)] att <- rbinom(sqrt(n), 3, 0.5) mix_matrix(A, att = att) #>     To #> From 0 1 2 #>    0 0 1 3 #>    1 0 0 4 #>    2 1 3 9"},{"path":"https://anespinosa.github.io/netmem/reference/mixed_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Multilevel triad and quadrilateral census — mixed_census","title":"Multilevel triad and quadrilateral census — mixed_census","text":"Multilevel triad quadrilateral census","code":""},{"path":"https://anespinosa.github.io/netmem/reference/mixed_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multilevel triad and quadrilateral census — mixed_census","text":"","code":"mixed_census(A1, B1, B2 = NULL, quad = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/mixed_census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multilevel triad and quadrilateral census — mixed_census","text":"A1 adjacent matrix object. B1 incidence matrix object. B2 incidence matrix object. quad Whether matrix quadrilateral census .","code":""},{"path":"https://anespinosa.github.io/netmem/reference/mixed_census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multilevel triad and quadrilateral census — mixed_census","text":"function return counts multilevel census. quad = TRUE, function return multilevel quadrilateral census.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/mixed_census.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multilevel triad and quadrilateral census — mixed_census","text":"Espinosa-Rada, . (2021). Network Approach Sociological Study Science: Modelling Dynamic Multilevel Networks. [PhD](https://research.manchester.ac.uk/en/studentTheses/-network-approach---sociological-study--science--know). University Manchester. Espinosa-Rada, ., Bellotti, E., Everett, M., & Stadtfeld, C. (2024). Co-evolution socio-cognitive scientific network: case study citation dynamics among astronomers. Social Networks, 78, 92–108. https://doi.org/10.1016/j.socnet.2023.11.008 Hollway, J., Lomi, ., Pallotti, F., & Stadtfeld, C. (2017). Multilevel social spaces: network dynamics organizational fields. Network Science, 5(2), 187–212. https://doi.org/10.1017/nws.2017.8","code":""},{"path":"https://anespinosa.github.io/netmem/reference/mixed_census.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multilevel triad and quadrilateral census — mixed_census","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/mixed_census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multilevel triad and quadrilateral census — mixed_census","text":"","code":"B1 <- matrix(c(   1, 1, 0,   0, 0, 1,   0, 0, 1,   1, 0, 0 ), byrow = TRUE, ncol = 3) A1 <- matrix(c(   0, 1, 0, 1,   1, 0, 0, 1,   0, 1, 0, 1,   1, 0, 1, 0 ), byrow = TRUE, ncol = 4) B2 <- matrix(c(   1, 0, 0, 0, 0,   0, 1, 0, 1, 0,   0, 0, 0, 0, 0,   0, 0, 0, 0, 0 ), byrow = TRUE, ncol = 5)  mixed_census(A1, B1, B2, quad = TRUE) #>   000   100   001   010   020   200  11D0  11U0   120   210   220   002  01D1  #>     0    12     0     9     9     0     3     3    20     3     4     0     4  #>  01U1   012   021   022  101N  101P   201   102   202 11D1W 11U1P 11D1P 11U1W  #>     2     0     1     0     1     2     0     0     0     2     0     0     2  #>  121W  121P  21D1  21U1  11D2  11U2   221   122   212   222  #>     5     5     0     2     0     0     1     0     0     0"},{"path":"https://anespinosa.github.io/netmem/reference/multilevel_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Degree centrality for multilevel networks — multilevel_degree","title":"Degree centrality for multilevel networks — multilevel_degree","text":"Degree centrality multilevel networks","code":""},{"path":"https://anespinosa.github.io/netmem/reference/multilevel_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degree centrality for multilevel networks — multilevel_degree","text":"","code":"multilevel_degree(   A1,   B1,   A2 = NULL,   B2 = NULL,   A3 = NULL,   B3 = NULL,   complete = FALSE,   digraphA1 = FALSE,   digraphA2 = FALSE,   digraphA3 = FALSE,   typeA1 = \"out\",   typeA2 = \"out\",   typeA3 = \"out\",   loopsA1 = FALSE,   loopsA2 = FALSE,   loopsA3 = FALSE,   normalized = FALSE,   weightedA1 = FALSE,   weightedA2 = FALSE,   weightedA3 = FALSE,   alphaA1 = 0.5,   alphaA2 = 0.5,   alphaA3 = 0.5 )"},{"path":"https://anespinosa.github.io/netmem/reference/multilevel_degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Degree centrality for multilevel networks — multilevel_degree","text":"A1 square matrix lowest level B1 incidence matrix ties nodes first level nodes second level A2 square matrix second level B2 incidence matrix ties nodes second level nodes third level A3 square matrix third level B3 incidence matrix ties nodes third level nodes first level complete Add degree bipartite tripartite networks B1, B2 /B3, low_multilevel (.e. A1+B1+B2+B3), meso_multilevel (.e. B1+A2+B2+B3) high_multilevel (.e. B1+B2+A3+B3) degree digraphA1 Whether A1 directed network digraphA2 Whether A2 directed network digraphA3 Whether A3 directed network typeA1 Type degree network A1, \"\" -degree, \"\" -degree \"\" sum two typeA2 Type degree network A2, \"\" -degree, \"\" -degree \"\" sum two typeA3 Type degree network A3, \"\" -degree, \"\" -degree \"\" sum two loopsA1 Whether loops edges considered matrix A1 loopsA2 Whether loops edges considered matrix A2 loopsA3 Whether loops edges considered matrix A3 normalized TRUE result divided (n-1)+k+m first level, (m-1)+n+k second level, (k-1)+m+n according Espinosa-Rada et al. (2021) weightedA1 Whether A1 weighted weightedA2 Whether A2 weighted weightedA3 Whether A3 weighted alphaA1 alpha parameter A1 according Opsahl et al (2010) weighted networks. value 0.5 given default. alphaA2 alpha parameter A2 according Opsahl et al (2010) weighted networks. value 0.5 given default. alphaA3 alpha parameter A3 according Opsahl et al (2010) weighted networks. value 0.5 given default.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/multilevel_degree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Degree centrality for multilevel networks — multilevel_degree","text":"Return data.frame multilevel degree","code":""},{"path":"https://anespinosa.github.io/netmem/reference/multilevel_degree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Degree centrality for multilevel networks — multilevel_degree","text":"Borgatti, S. P., Everett, M. G. (1997). Network analysis 2-mode data. Social Networks, 19(3), 243–269. Freeman, L. C. (1978). Centrality social networks conceptual clarification. Social Networks, 1(3), 215–239. Opsahl, T., Agneessens, F., Skvoretz, J. (2010). Node centrality weighted networks: Generalizing degree shortest paths. Social Networks, 32(3), 245–251.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/multilevel_degree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Degree centrality for multilevel networks — multilevel_degree","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/multilevel_degree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Degree centrality for multilevel networks — multilevel_degree","text":"","code":"A1 <- matrix(c(   0, 1, 0, 0, 0,   1, 0, 0, 1, 0,   0, 0, 0, 1, 0,   0, 1, 1, 0, 1,   0, 0, 0, 1, 0 ), byrow = TRUE, ncol = 5)  B1 <- matrix(c(   1, 0, 0,   1, 1, 0,   0, 1, 0,   0, 1, 0,   0, 1, 1 ), byrow = TRUE, ncol = 3)  A2 <- matrix(c(   0, 1, 1,   1, 0, 0,   1, 0, 0 ), byrow = TRUE, nrow = 3)  B2 <- matrix(c(   1, 1, 0, 0,   0, 0, 1, 0,   0, 0, 1, 1 ), byrow = TRUE, ncol = 4)  A3 <- matrix(c(   0, 1, 1, 1,   1, 0, 0, 0,   1, 0, 0, 1,   1, 0, 1, 0 ), byrow = TRUE, ncol = 4)  B3 <- matrix(c(   1, 0, 0, 0, 0,   0, 1, 0, 1, 0,   0, 0, 0, 0, 0,   0, 0, 0, 0, 0 ), byrow = TRUE, ncol = 5)  multilevel_degree(A1, B1, A2, B2, A3, B3) #>    multilevel #> n1          3 #> n2          5 #> n3          2 #> n4          5 #> n5          3 #> m1          6 #> m2          6 #> m3          4 #> k1          5 #> k2          4 #> k3          4 #> k4          3 if (FALSE) { # \\dontrun{ multilevel_degree(A1, B1, A2, B2, A3, B3, normalized = TRUE, complete = TRUE) } # }"},{"path":"https://anespinosa.github.io/netmem/reference/multiplex_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiplex triad census — multiplex_census","title":"Multiplex triad census — multiplex_census","text":"function counts different subgraphs three nodes multiplex directed undirected network.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/multiplex_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiplex triad census — multiplex_census","text":"","code":"multiplex_census(A, B)"},{"path":"https://anespinosa.github.io/netmem/reference/multiplex_census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiplex triad census — multiplex_census","text":"directed matrix object. B undirected matrix object.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/multiplex_census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiplex triad census — multiplex_census","text":"function gives counts mixed multiplex triad census directed undirected network.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/multiplex_census.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multiplex triad census — multiplex_census","text":"Espinosa-Rada, . (2021). Network Approach Sociological Study Science: Modelling Dynamic Multilevel Networks. [PhD](https://research.manchester.ac.uk/en/studentTheses/-network-approach---sociological-study--science--know). University Manchester. Espinosa-Rada, ., Bellotti, E., Everett, M., & Stadtfeld, C. (2024). Co-evolution socio-cognitive scientific network: case study citation dynamics among astronomers. Social Networks, 78, 92–108. https://doi.org/10.1016/j.socnet.2023.11.008","code":""},{"path":"https://anespinosa.github.io/netmem/reference/multiplex_census.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multiplex triad census — multiplex_census","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/multiplex_census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiplex triad census — multiplex_census","text":"","code":"# SOAR A <- matrix(   c(     0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1,     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,     0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1,     0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0   ),   byrow = TRUE, ncol = 12 )  B <- matrix(   c(     0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0   ),   byrow = TRUE, ncol = 12 )  multiplex_census(A, B) #>            003_003            003_102            003_201            003_300  #>                 17                 52                 22                 20  #>            012_003           012_102a           012_102b           012_102c  #>                113                 52                 43                 46  #>           012_201b          012_201ac            012_300           021u_003  #>                 43                 39                 40                 79  #>         021u_102ac          021u_102b         021u_201ab          021u_201c  #>                 12                 14                  9                  5  #>           021u_300           021d_003         021d_102ac          021d_120b  #>                  6                 91                 20                 18  #>         021d_201ab          021d_201c           021d_300       102_003_102a  #>                 20                 17                 17                 15  #>    102_102bc_201ac            102_300           021c_003          021c_102a  #>                  2                  3                 80                  9  #>          021c_103b          021c_102c         021c_210ab          021c_201c  #>                  7                 13                  9                  6  #>           021c_300           030t_003         030t_102ab          030t_102b  #>                  7                 82                 10                 17  #>          030t_102c         030t_210ab      030t_201c_300           030c_003  #>                 10                 12                  9                 74  #>        030c_102abc        030c_201abc           030c_300           111d_003  #>                  1                  3                  1                 76  #>     111d_102a_201a          111d_102b     111d_102c_201b      111d_201c_300  #>                  5                  7                  2                  3  #>           111u_003     111u_102a_201a    111u_102bc_201b      111u_201c_300  #>                 76                  5                  2                  3  #>      120u_003_102b   120u_102ab_201ab      120u_201c_300      120d_003_120b  #>                 13                  8                  5                  3  #>   120d_102ab_201ab      120d_201c_300            201_003    201_102ac_201ab  #>                  5                  2                 74                  0  #> 201_102c_201bc_300           120c_003          120c_120c           120c_210  #>                  1                 75                  2                  4  #>           120c_300        210_003_210            210_300        300_003_300  #>                  2                  3                  1                  1"},{"path":"https://anespinosa.github.io/netmem/reference/percolation_clique.html","id":null,"dir":"Reference","previous_headings":"","what":"Clique percolation — percolation_clique","title":"Clique percolation — percolation_clique","text":"Clique Percolation Method (CPM) algorithm finding overlapping communities within networks, introduced Palla et al. (2005). function firstly identify cliques size k, creates incidence matrix affiliation network.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/percolation_clique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clique percolation — percolation_clique","text":"","code":"percolation_clique(A)"},{"path":"https://anespinosa.github.io/netmem/reference/percolation_clique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clique percolation — percolation_clique","text":"matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/percolation_clique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clique percolation — percolation_clique","text":"matrix assign node clique","code":""},{"path":"https://anespinosa.github.io/netmem/reference/percolation_clique.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Clique percolation — percolation_clique","text":"Palla, G., Derényi, ., Farkas, ., & Vicsek, T. (2005). Uncovering overlapping community structure complex networks nature society. Nature, 435(7043), 814-818.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/percolation_clique.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Clique percolation — percolation_clique","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/percolation_clique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clique percolation — percolation_clique","text":"","code":"A <- matrix(   c(     0, 1, 1, 1, 0, 0, 0, 0, 0,     1, 0, 1, 0, 0, 0, 0, 0, 0,     1, 1, 0, 1, 0, 0, 0, 0, 0,     1, 0, 1, 0, 1, 1, 0, 0, 0,     0, 0, 0, 1, 0, 1, 1, 1, 0,     0, 0, 0, 1, 1, 0, 1, 1, 0,     0, 0, 0, 0, 1, 1, 0, 1, 1,     0, 0, 0, 0, 1, 1, 1, 0, 0,     0, 0, 0, 0, 0, 0, 1, 0, 0   ),   byrow = TRUE, ncol = 9 ) rownames(A) <- letters[1:nrow(A)] colnames(A) <- letters[1:ncol(A)] percolation_clique(A) #>   1 1 2 2 2 2 2 #> a 1 1 0 0 0 0 0 #> b 1 0 0 0 0 0 0 #> c 1 1 0 0 0 0 0 #> d 0 1 1 0 0 0 0 #> e 0 0 1 1 1 1 0 #> f 0 0 1 1 1 0 1 #> g 0 0 0 1 0 1 1 #> h 0 0 0 0 1 1 1 #> i 0 0 0 0 0 0 0"},{"path":"https://anespinosa.github.io/netmem/reference/perm_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Permute labels of a matrix — perm_label","title":"Permute labels of a matrix — perm_label","text":"function permutes labels matrix.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/perm_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permute labels of a matrix — perm_label","text":"","code":"perm_label(A, m = 1, unique = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/perm_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permute labels of a matrix — perm_label","text":"matrix m Number permutations unique Whether return unique cases","code":""},{"path":"https://anespinosa.github.io/netmem/reference/perm_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permute labels of a matrix — perm_label","text":"function returns permutation labels.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/perm_label.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Permute labels of a matrix — perm_label","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/perm_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permute labels of a matrix — perm_label","text":"","code":"W <- matrix(c(   0, 1, 0, 0, 0,   0, 0, 1, 0, 0,   1, 0, 0, 0, 0,   0, 0, 0, 0, 1,   0, 0, 0, 1, 0 ), byrow = TRUE, ncol = 5) rownames(W) <- c(\"P\", \"Q\", \"R\", \"S\", \"T\") colnames(W) <- rownames(W) perm_label(W, m = 1000, unique = TRUE) #>        [,1] [,2] [,3] [,4] [,5] #>   [1,] \"R\"  \"T\"  \"P\"  \"S\"  \"Q\"  #>   [2,] \"R\"  \"P\"  \"S\"  \"Q\"  \"T\"  #>   [3,] \"R\"  \"P\"  \"Q\"  \"T\"  \"S\"  #>   [4,] \"Q\"  \"R\"  \"S\"  \"P\"  \"T\"  #>   [5,] \"P\"  \"S\"  \"R\"  \"Q\"  \"T\"  #>   [6,] \"T\"  \"P\"  \"Q\"  \"S\"  \"R\"  #>   [7,] \"P\"  \"S\"  \"Q\"  \"R\"  \"T\"  #>   [8,] \"R\"  \"T\"  \"Q\"  \"P\"  \"S\"  #>   [9,] \"R\"  \"Q\"  \"S\"  \"P\"  \"T\"  #>  [10,] \"P\"  \"R\"  \"Q\"  \"T\"  \"S\"  #>  [11,] \"Q\"  \"R\"  \"P\"  \"S\"  \"T\"  #>  [12,] \"T\"  \"R\"  \"P\"  \"Q\"  \"S\"  #>  [13,] \"P\"  \"R\"  \"S\"  \"Q\"  \"T\"  #>  [14,] \"T\"  \"Q\"  \"P\"  \"S\"  \"R\"  #>  [15,] \"T\"  \"S\"  \"Q\"  \"P\"  \"R\"  #>  [16,] \"Q\"  \"P\"  \"S\"  \"R\"  \"T\"  #>  [17,] \"S\"  \"T\"  \"P\"  \"R\"  \"Q\"  #>  [18,] \"P\"  \"Q\"  \"R\"  \"S\"  \"T\"  #>  [19,] \"T\"  \"Q\"  \"R\"  \"S\"  \"P\"  #>  [20,] \"S\"  \"R\"  \"T\"  \"P\"  \"Q\"  #>  [21,] \"T\"  \"P\"  \"R\"  \"S\"  \"Q\"  #>  [22,] \"Q\"  \"R\"  \"T\"  \"P\"  \"S\"  #>  [23,] \"S\"  \"R\"  \"P\"  \"Q\"  \"T\"  #>  [24,] \"S\"  \"Q\"  \"P\"  \"R\"  \"T\"  #>  [25,] \"Q\"  \"P\"  \"T\"  \"R\"  \"S\"  #>  [26,] \"P\"  \"R\"  \"T\"  \"S\"  \"Q\"  #>  [27,] \"Q\"  \"S\"  \"R\"  \"T\"  \"P\"  #>  [28,] \"P\"  \"R\"  \"T\"  \"Q\"  \"S\"  #>  [29,] \"P\"  \"T\"  \"S\"  \"Q\"  \"R\"  #>  [30,] \"T\"  \"Q\"  \"R\"  \"P\"  \"S\"  #>  [31,] \"T\"  \"S\"  \"R\"  \"P\"  \"Q\"  #>  [32,] \"T\"  \"R\"  \"Q\"  \"S\"  \"P\"  #>  [33,] \"T\"  \"S\"  \"R\"  \"Q\"  \"P\"  #>  [34,] \"Q\"  \"T\"  \"P\"  \"S\"  \"R\"  #>  [35,] \"S\"  \"T\"  \"Q\"  \"R\"  \"P\"  #>  [36,] \"Q\"  \"R\"  \"T\"  \"S\"  \"P\"  #>  [37,] \"S\"  \"T\"  \"Q\"  \"P\"  \"R\"  #>  [38,] \"T\"  \"P\"  \"S\"  \"Q\"  \"R\"  #>  [39,] \"T\"  \"P\"  \"Q\"  \"R\"  \"S\"  #>  [40,] \"Q\"  \"R\"  \"P\"  \"T\"  \"S\"  #>  [41,] \"Q\"  \"P\"  \"T\"  \"S\"  \"R\"  #>  [42,] \"S\"  \"R\"  \"P\"  \"T\"  \"Q\"  #>  [43,] \"Q\"  \"T\"  \"P\"  \"R\"  \"S\"  #>  [44,] \"S\"  \"R\"  \"Q\"  \"T\"  \"P\"  #>  [45,] \"R\"  \"T\"  \"S\"  \"P\"  \"Q\"  #>  [46,] \"P\"  \"S\"  \"R\"  \"T\"  \"Q\"  #>  [47,] \"R\"  \"S\"  \"P\"  \"T\"  \"Q\"  #>  [48,] \"R\"  \"T\"  \"Q\"  \"S\"  \"P\"  #>  [49,] \"P\"  \"T\"  \"R\"  \"S\"  \"Q\"  #>  [50,] \"R\"  \"Q\"  \"T\"  \"S\"  \"P\"  #>  [51,] \"S\"  \"P\"  \"T\"  \"R\"  \"Q\"  #>  [52,] \"S\"  \"Q\"  \"T\"  \"R\"  \"P\"  #>  [53,] \"T\"  \"P\"  \"S\"  \"R\"  \"Q\"  #>  [54,] \"R\"  \"P\"  \"S\"  \"T\"  \"Q\"  #>  [55,] \"R\"  \"S\"  \"Q\"  \"T\"  \"P\"  #>  [56,] \"R\"  \"S\"  \"T\"  \"P\"  \"Q\"  #>  [57,] \"R\"  \"P\"  \"T\"  \"Q\"  \"S\"  #>  [58,] \"P\"  \"Q\"  \"S\"  \"R\"  \"T\"  #>  [59,] \"P\"  \"T\"  \"R\"  \"Q\"  \"S\"  #>  [60,] \"R\"  \"P\"  \"T\"  \"S\"  \"Q\"  #>  [61,] \"T\"  \"R\"  \"S\"  \"Q\"  \"P\"  #>  [62,] \"S\"  \"R\"  \"T\"  \"Q\"  \"P\"  #>  [63,] \"P\"  \"Q\"  \"T\"  \"S\"  \"R\"  #>  [64,] \"R\"  \"P\"  \"Q\"  \"S\"  \"T\"  #>  [65,] \"Q\"  \"S\"  \"T\"  \"R\"  \"P\"  #>  [66,] \"Q\"  \"T\"  \"S\"  \"R\"  \"P\"  #>  [67,] \"T\"  \"P\"  \"R\"  \"Q\"  \"S\"  #>  [68,] \"Q\"  \"T\"  \"R\"  \"S\"  \"P\"  #>  [69,] \"R\"  \"T\"  \"S\"  \"Q\"  \"P\"  #>  [70,] \"Q\"  \"R\"  \"S\"  \"T\"  \"P\"  #>  [71,] \"T\"  \"S\"  \"P\"  \"Q\"  \"R\"  #>  [72,] \"R\"  \"Q\"  \"T\"  \"P\"  \"S\"  #>  [73,] \"T\"  \"S\"  \"Q\"  \"R\"  \"P\"  #>  [74,] \"S\"  \"Q\"  \"T\"  \"P\"  \"R\"  #>  [75,] \"S\"  \"Q\"  \"R\"  \"T\"  \"P\"  #>  [76,] \"P\"  \"T\"  \"Q\"  \"S\"  \"R\"  #>  [77,] \"T\"  \"S\"  \"P\"  \"R\"  \"Q\"  #>  [78,] \"P\"  \"S\"  \"Q\"  \"T\"  \"R\"  #>  [79,] \"R\"  \"Q\"  \"S\"  \"T\"  \"P\"  #>  [80,] \"P\"  \"Q\"  \"S\"  \"T\"  \"R\"  #>  [81,] \"P\"  \"R\"  \"S\"  \"T\"  \"Q\"  #>  [82,] \"R\"  \"S\"  \"T\"  \"Q\"  \"P\"  #>  [83,] \"P\"  \"S\"  \"T\"  \"Q\"  \"R\"  #>  [84,] \"R\"  \"T\"  \"P\"  \"Q\"  \"S\"  #>  [85,] \"Q\"  \"P\"  \"S\"  \"T\"  \"R\"  #>  [86,] \"T\"  \"R\"  \"Q\"  \"P\"  \"S\"  #>  [87,] \"S\"  \"P\"  \"R\"  \"T\"  \"Q\"  #>  [88,] \"P\"  \"R\"  \"Q\"  \"S\"  \"T\"  #>  [89,] \"P\"  \"T\"  \"Q\"  \"R\"  \"S\"  #>  [90,] \"S\"  \"Q\"  \"P\"  \"T\"  \"R\"  #>  [91,] \"S\"  \"T\"  \"R\"  \"P\"  \"Q\"  #>  [92,] \"Q\"  \"S\"  \"T\"  \"P\"  \"R\"  #>  [93,] \"T\"  \"R\"  \"S\"  \"P\"  \"Q\"  #>  [94,] \"Q\"  \"S\"  \"R\"  \"P\"  \"T\"  #>  [95,] \"Q\"  \"P\"  \"R\"  \"T\"  \"S\"  #>  [96,] \"Q\"  \"S\"  \"P\"  \"T\"  \"R\"  #>  [97,] \"T\"  \"Q\"  \"S\"  \"P\"  \"R\"  #>  [98,] \"R\"  \"S\"  \"Q\"  \"P\"  \"T\"  #>  [99,] \"R\"  \"S\"  \"P\"  \"Q\"  \"T\"  #> [100,] \"P\"  \"Q\"  \"T\"  \"R\"  \"S\"  #> [101,] \"Q\"  \"T\"  \"R\"  \"P\"  \"S\"  #> [102,] \"P\"  \"Q\"  \"R\"  \"T\"  \"S\"  #> [103,] \"S\"  \"P\"  \"R\"  \"Q\"  \"T\"  #> [104,] \"P\"  \"S\"  \"T\"  \"R\"  \"Q\"  #> [105,] \"S\"  \"P\"  \"Q\"  \"T\"  \"R\"  #> [106,] \"Q\"  \"S\"  \"P\"  \"R\"  \"T\"  #> [107,] \"R\"  \"Q\"  \"P\"  \"S\"  \"T\"  #> [108,] \"Q\"  \"P\"  \"R\"  \"S\"  \"T\"  #> [109,] \"P\"  \"T\"  \"S\"  \"R\"  \"Q\"  #> [110,] \"S\"  \"Q\"  \"R\"  \"P\"  \"T\"  #> [111,] \"S\"  \"P\"  \"Q\"  \"R\"  \"T\"  #> [112,] \"R\"  \"Q\"  \"P\"  \"T\"  \"S\"  #> [113,] \"S\"  \"P\"  \"T\"  \"Q\"  \"R\"  #> [114,] \"T\"  \"R\"  \"P\"  \"S\"  \"Q\"  #> [115,] \"S\"  \"T\"  \"P\"  \"Q\"  \"R\"  #> [116,] \"S\"  \"T\"  \"R\"  \"Q\"  \"P\"  #> [117,] \"T\"  \"Q\"  \"S\"  \"R\"  \"P\"  #> [118,] \"Q\"  \"T\"  \"S\"  \"P\"  \"R\"  #> [119,] \"S\"  \"R\"  \"Q\"  \"P\"  \"T\"  #> [120,] \"T\"  \"Q\"  \"P\"  \"R\"  \"S\""},{"path":"https://anespinosa.github.io/netmem/reference/perm_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation matrix — perm_matrix","title":"Permutation matrix — perm_matrix","text":"function create permutation matrices.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/perm_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation matrix — perm_matrix","text":"","code":"perm_matrix(n, m = 1, unique = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/perm_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation matrix — perm_matrix","text":"n size square matri m Number permutations unique Whether return unique cases","code":""},{"path":"https://anespinosa.github.io/netmem/reference/perm_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation matrix — perm_matrix","text":"function returns list permutation matrices","code":""},{"path":"https://anespinosa.github.io/netmem/reference/perm_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Permutation matrix — perm_matrix","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/perm_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation matrix — perm_matrix","text":"","code":"W <- matrix(c(   0, 1, 0, 0, 0,   0, 0, 1, 0, 0,   1, 0, 0, 0, 0,   0, 0, 0, 0, 1,   0, 0, 0, 1, 0 ), byrow = TRUE, ncol = 5) rownames(W) <- c(\"P\", \"Q\", \"R\", \"S\", \"T\") colnames(W) <- rownames(W) perm_matrix(5, m = 1000, unique = TRUE) #> [[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    1    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    1    0    0    0 #>  #> [[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    0    0    0    1 #> [5,]    0    1    0    0    0 #>  #> [[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    0    1    0 #>  #> [[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    1    0    0 #>  #> [[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    0    0    1 #>  #> [[6]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    0    1 #> [5,]    1    0    0    0    0 #>  #> [[7]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    1    0    0 #> [5,]    1    0    0    0    0 #>  #> [[8]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    1    0    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    0    1    0    0 #> [5,]    1    0    0    0    0 #>  #> [[9]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    1    0    0    0 #> [5,]    0    0    1    0    0 #>  #> [[10]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    0    1 #>  #> [[11]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    1    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    1    0 #>  #> [[12]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    1    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    1    0    0 #>  #> [[13]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    0    1    0    0 #> [5,]    0    1    0    0    0 #>  #> [[14]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    1    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[15]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    1    0    0 #> [4,]    0    1    0    0    0 #> [5,]    1    0    0    0    0 #>  #> [[16]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    0    0    1 #> [3,]    0    1    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    1    0    0    0    0 #>  #> [[17]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    1    0    0 #> [5,]    1    0    0    0    0 #>  #> [[18]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    1    0    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    0    1 #>  #> [[19]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    1    0    0    0    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    1    0    0 #>  #> [[20]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    0    1    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    0    1 #>  #> [[21]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    1    0    0    0 #> [5,]    1    0    0    0    0 #>  #> [[22]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    0    1    0 #> [3,]    0    1    0    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    1    0    0 #>  #> [[23]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    1    0 #>  #> [[24]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    0    0    1 #>  #> [[25]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    1    0    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[26]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    1    0    0    0 #>  #> [[27]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    1    0    0    0    0 #>  #> [[28]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    0    1 #>  #> [[29]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    1    0 #>  #> [[30]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    1    0    0    0 #>  #> [[31]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    1    0    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    1    0    0    0    0 #>  #> [[32]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    0    0    0    1 #> [5,]    1    0    0    0    0 #>  #> [[33]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    1    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    1    0    0    0 #>  #> [[34]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    0    1 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[35]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    0    1    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    1    0    0 #>  #> [[36]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    0    1    0 #>  #> [[37]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    0    1 #> [5,]    1    0    0    0    0 #>  #> [[38]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    1    0 #>  #> [[39]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    1    0    0 #> [5,]    0    1    0    0    0 #>  #> [[40]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    0    1    0 #> [5,]    0    1    0    0    0 #>  #> [[41]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    1    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    0    0    1 #>  #> [[42]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    0    1    0 #> [5,]    1    0    0    0    0 #>  #> [[43]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    1    0    0    0 #>  #> [[44]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    0    1    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    0    1 #>  #> [[45]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    1    0    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    1    0 #> [5,]    1    0    0    0    0 #>  #> [[46]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    0    0    1 #> [3,]    0    1    0    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    1    0    0 #>  #> [[47]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[48]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    1    0    0 #>  #> [[49]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    0    1 #>  #> [[50]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    0    1    0 #> [5,]    0    1    0    0    0 #>  #> [[51]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    0    0    1 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[52]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    0    0    0    1 #> [4,]    1    0    0    0    0 #> [5,]    0    0    1    0    0 #>  #> [[53]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    0    0    0    1 #> [5,]    1    0    0    0    0 #>  #> [[54]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    1    0    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    0    1    0 #>  #> [[55]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    1    0    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    0    0    1 #>  #> [[56]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    1    0    0    0 #>  #> [[57]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    0    0    1 #>  #> [[58]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    1    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    1    0 #> [5,]    1    0    0    0    0 #>  #> [[59]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    0    1 #>  #> [[60]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    0    1    0 #>  #> [[61]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    0    1    0 #> [3,]    0    0    1    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    1    0    0    0 #>  #> [[62]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    1    0    0    0    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    0    1 #>  #> [[63]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    0    1 #>  #> [[64]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    1    0    0 #> [3,]    0    1    0    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    0    1 #>  #> [[65]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    1    0    0    0 #> [3,]    0    0    0    1    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    1    0    0 #>  #> [[66]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    1    0    0    0    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    1    0    0 #>  #> [[67]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    1    0    0    0 #>  #> [[68]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    0    1    0 #> [3,]    0    0    1    0    0 #> [4,]    0    1    0    0    0 #> [5,]    1    0    0    0    0 #>  #> [[69]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    1    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    0    1 #>  #> [[70]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    1    0    0 #>  #> [[71]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    0    0    0    1 #> [5,]    0    1    0    0    0 #>  #> [[72]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    1    0    0    0    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    1    0 #>  #> [[73]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    0    1    0 #> [4,]    0    1    0    0    0 #> [5,]    1    0    0    0    0 #>  #> [[74]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    1    0    0    0 #> [5,]    1    0    0    0    0 #>  #> [[75]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    0    0    1 #> [4,]    1    0    0    0    0 #> [5,]    0    0    1    0    0 #>  #> [[76]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    0    0    0    1 #> [4,]    0    1    0    0    0 #> [5,]    0    0    1    0    0 #>  #> [[77]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    1    0    0 #> [3,]    0    1    0    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[78]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    0    1    0 #> [5,]    1    0    0    0    0 #>  #> [[79]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    1    0    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    1    0    0    0 #>  #> [[80]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    0    0    0    1 #> [4,]    1    0    0    0    0 #> [5,]    0    1    0    0    0 #>  #> [[81]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    1    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    0    1 #>  #> [[82]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    0    1    0 #> [5,]    0    0    1    0    0 #>  #> [[83]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    0    1    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    1    0    0    0 #>  #> [[84]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    1    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[85]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    1    0    0 #>  #> [[86]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    0    1    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    1    0    0 #>  #> [[87]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    0    1    0 #> [4,]    0    0    1    0    0 #> [5,]    1    0    0    0    0 #>  #> [[88]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    1    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[89]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    1    0    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    1    0    0 #>  #> [[90]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    0    1    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    1    0    0    0    0 #>  #> [[91]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    0    0    1 #> [3,]    1    0    0    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[92]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[93]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    0    1    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    1    0    0    0 #>  #> [[94]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    0    1    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    0    1 #>  #> [[95]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    0    1    0 #> [4,]    1    0    0    0    0 #> [5,]    0    1    0    0    0 #>  #> [[96]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    0    1    0 #> [5,]    0    0    1    0    0 #>  #> [[97]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    1    0 #> [5,]    1    0    0    0    0 #>  #> [[98]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    0    1 #>  #> [[99]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    1    0    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    1    0    0 #>  #> [[100]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    1    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[101]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    1    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    1    0    0    0 #>  #> [[102]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    0    1 #>  #> [[103]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    1    0    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    0    0    1 #>  #> [[104]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    0    0    0    1 #> [4,]    0    1    0    0    0 #> [5,]    1    0    0    0    0 #>  #> [[105]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    0    1    0 #> [3,]    1    0    0    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    1    0    0 #>  #> [[106]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    0    1 #> [4,]    1    0    0    0    0 #> [5,]    0    1    0    0    0 #>  #> [[107]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    0    1    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    1    0    0 #>  #> [[108]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    1    0    0 #>  #> [[109]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    1    0    0 #> [3,]    0    0    0    1    0 #> [4,]    1    0    0    0    0 #> [5,]    0    1    0    0    0 #>  #> [[110]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    0    1 #> [4,]    0    0    1    0    0 #> [5,]    0    1    0    0    0 #>  #> [[111]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    1    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    0    1    0 #>  #> [[112]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    1    0    0    0    0 #> [3,]    0    0    0    1    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    1    0    0 #>  #> [[113]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    0    1    0 #> [3,]    1    0    0    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    0    1 #>  #> [[114]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    0    1    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    1    0    0    0 #> [5,]    0    0    0    0    1 #>  #> [[115]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    0    1    0 #> [4,]    0    0    1    0    0 #> [5,]    0    1    0    0    0 #>  #> [[116]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    1    0    0    0 #> [4,]    1    0    0    0    0 #> [5,]    0    0    0    1    0 #>  #> [[117]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    0 #> [2,]    0    1    0    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    0    1 #>  #> [[118]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    1    0    0    0 #> [3,]    1    0    0    0    0 #> [4,]    0    0    1    0    0 #> [5,]    0    0    0    1    0 #>  #> [[119]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    0    1    0    0 #> [3,]    0    1    0    0    0 #> [4,]    0    0    0    0    1 #> [5,]    0    0    0    1    0 #>  #> [[120]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    1    0    0    0 #> [2,]    0    0    0    0    1 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    1    0 #> [5,]    1    0    0    0    0 #>"},{"path":"https://anespinosa.github.io/netmem/reference/posneg_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Positive-negative centrality — posneg_index","title":"Positive-negative centrality — posneg_index","text":"Positive-negative centrality","code":""},{"path":"https://anespinosa.github.io/netmem/reference/posneg_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Positive-negative centrality — posneg_index","text":"","code":"posneg_index(A, select = c(\"all\", \"in\", \"out\"))"},{"path":"https://anespinosa.github.io/netmem/reference/posneg_index.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Positive-negative centrality — posneg_index","text":"Adapted David Schoch 'signnet'","code":""},{"path":"https://anespinosa.github.io/netmem/reference/posneg_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Positive-negative centrality — posneg_index","text":"signed symmetric matrix (.e., ties either -1, 0 1) select Whether consider direction outgoing ties. Considering (default), ties.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/posneg_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Positive-negative centrality — posneg_index","text":"function return positive-negative centrality index signed networks (Everett Borgatti).","code":""},{"path":"https://anespinosa.github.io/netmem/reference/posneg_index.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Positive-negative centrality — posneg_index","text":"Everett, Martin Borgatti, Stephen (2014). Networks containing negative ties. Social Networks, 38, 111-120. http://dx.doi.org/10.1016/j.socnet.2014.03.005","code":""},{"path":"https://anespinosa.github.io/netmem/reference/posneg_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Positive-negative centrality — posneg_index","text":"","code":"A <- matrix(   c(     0, 1, -1, -1, -1, -1, 0, 0, 0, 0, 0, -1, 0, 0, 1, 1,     1, 0, -1, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 1, 1,     -1, -1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,     -1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,     -1, -1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, -1, -1,     -1, -1, 1, 0, 0, 0, 1, 1, -1, 0, 1, 1, -1, 0, 0, -1,     0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0,     0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, -1, 0, 0,     0, -1, 0, 0, 1, -1, 0, 0, 0, 1, -1, 0, 1, 0, -1, 0,     0, -1, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 1, 0, -1, 0,     0, 0, 0, 0, 0, 1, 1, 1, -1, -1, 0, 1, -1, 0, -1, -1,     -1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, -1, -1, -1,     0, 0, 0, 0, 0, -1, 1, 0, 1, 1, -1, 0, 0, 1, -1, -1,     0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, -1, 1, 0, 0, -1,     1, 1, 0, 0, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0, 0, 1,     1, 1, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, 1, 0   ),   ncol = 16, nrow = 16, byrow = TRUE ) label <- c(   \"Gavev\", \"Kotun\", \"Ove\", \"Alika\", \"Nagam\", \"Gahuk\", \"Masil\", \"Ukudz\",   \"Notoh\", \"Kohik\", \"Geham\", \"Asaro\", \"Uheto\", \"Seuve\", \"Nagad\", \"Gama\" ) rownames(A) <- label colnames(A) <- rownames(A) posneg_index(A, select = c(\"all\")) #>     Gavev     Kotun       Ove     Alika     Nagam     Gahuk     Masil     Ukudz  #> 0.7526608 0.7642241 1.0419771 1.0226038 0.9026693 0.9054574 1.2235610 1.1414595  #>     Notoh     Kohik     Geham     Asaro     Uheto     Seuve     Nagad      Gama  #> 0.8740846 0.9033828 0.8653172 0.9340946 0.9158561 0.8746127 0.7146865 0.7145186"},{"path":"https://anespinosa.github.io/netmem/reference/power_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Power matrix — power_function","title":"Power matrix — power_function","text":"Power matrix computed successive matrix multiplication.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/power_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power matrix — power_function","text":"","code":"power_function(A, n)"},{"path":"https://anespinosa.github.io/netmem/reference/power_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power matrix — power_function","text":"matrix n Positive integer","code":""},{"path":"https://anespinosa.github.io/netmem/reference/power_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power matrix — power_function","text":"function return power matrix repeating matrix multiplication.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/power_function.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Power matrix — power_function","text":"Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/power_function.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Power matrix — power_function","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/power_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power matrix — power_function","text":"","code":"A <- matrix(c(   1, 0, 0, 0,   1, 1, 0, 0,   1, 0, 1, 0,   0, 1, 1, 1 ), byrow = TRUE, ncol = 4, nrow = 4) power_function(A, 1000) #>        [,1] [,2] [,3] [,4] #> [1,]      1    0    0    0 #> [2,]   1000    1    0    0 #> [3,]   1000    0    1    0 #> [4,] 999000 1000 1000    1"},{"path":"https://anespinosa.github.io/netmem/reference/q_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Q-analysis — q_analysis","title":"Q-analysis — q_analysis","text":"Q-structure simplicial complex.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/q_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Q-analysis — q_analysis","text":"","code":"q_analysis(A, simplicial_complex = FALSE, dimensions = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/q_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Q-analysis — q_analysis","text":"incidence matrix simplicial_complex Whether incidence matrix simplices simplicial complexes representation dimensions Return successively chains high low dimensions ($q$) number components ($Q_p$)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/q_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Q-analysis — q_analysis","text":"function return q-analysis simplicial complex matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/q_analysis.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Q-analysis — q_analysis","text":"Atkin, R. H. (1974). Mathematical structure human affairs. New York: Crane, Rusak. Freeman, L. C. (1980). Q-analysis structure friendship networks. International Journal Man-Machine Studies, 12(4), 367–378. https://doi.org/10.1016/S0020-7373(80)80021-6","code":""},{"path":"https://anespinosa.github.io/netmem/reference/q_analysis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Q-analysis — q_analysis","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/q_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Q-analysis — q_analysis","text":"","code":"A <- matrix(c(   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0,   0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,   0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,   0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 ), byrow = TRUE, ncol = 19) colnames(A) <- letters[1:ncol(A)] rownames(A) <- 1:nrow(A)  q_analysis(A, simplicial_complex = TRUE) #> $`2` #>   component node #> 1         1    3 #> 2         2   13 #>  #> $`6` #>   component node #> 1         1    3 #> 2         2   13 #> 3         3    2 #> 4         4   19 #> 5         5   20 #> 6         6   21 #>  #> $`9` #>    component node #> 1          1    3 #> 10         2   15 #> 11         3   25 #> 5          4   20 #> 7          5    4 #> 8          6    9 #> 9          7   11 #> 2          8   13 #> 4          8   19 #> 6          8   21 #> 3          9    2 #> 12         9   28 #>  #> $`3` #>    component node #> 1          1    3 #> 2          1   13 #> 3          1    2 #> 4          1   19 #> 5          1   20 #> 6          1   21 #> 7          1    4 #> 8          1    9 #> 9          1   11 #> 10         1   15 #> 11         1   25 #> 12         1   28 #> 14         1    6 #> 15         1    8 #> 16         1   10 #> 18         1   14 #> 19         1   16 #> 20         1   17 #> 23         1   24 #> 24         1   26 #> 25         1   29 #> 13         2    5 #> 21         2   18 #> 17         3   12 #> 22         3   23 #>"},{"path":"https://anespinosa.github.io/netmem/reference/recip_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Reciprocity — recip_coef","title":"Reciprocity — recip_coef","text":"measure calculated reciprocity asymmetric matrix (directed graph).","code":""},{"path":"https://anespinosa.github.io/netmem/reference/recip_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reciprocity — recip_coef","text":"","code":"recip_coef(   A,   diag = NULL,   method = c(\"total_ratio\", \"ratio_nonnull\", \"global\") )"},{"path":"https://anespinosa.github.io/netmem/reference/recip_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reciprocity — recip_coef","text":"matrix diag Whether consider diagonal matrix method Whether use total_ratio, ratio_nonnull global reciprocity","code":""},{"path":"https://anespinosa.github.io/netmem/reference/recip_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reciprocity — recip_coef","text":"Return reciprocity coefficient","code":""},{"path":"https://anespinosa.github.io/netmem/reference/recip_coef.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reciprocity — recip_coef","text":"Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/recip_coef.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reciprocity — recip_coef","text":"Alejandro Espinosa-Rada <- matrix(c(0,1,1,0, 1,0,1,0, 0,0,0,0, 1,0,0,0), byrow = TRUE, ncol = 4) recip_coef()","code":""},{"path":"https://anespinosa.github.io/netmem/reference/redundancy.html","id":null,"dir":"Reference","previous_headings":"","what":"Redundancy measures — redundancy","title":"Redundancy measures — redundancy","text":"Redundancy measures structural holes theory binary matrixes","code":""},{"path":"https://anespinosa.github.io/netmem/reference/redundancy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redundancy measures — redundancy","text":"","code":"redundancy(A, ego = NULL, digraph = FALSE, weighted = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/redundancy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redundancy measures — redundancy","text":"symmetric matrix object ego Name ego matrix digraph Whether  matrix directed undirected weighted Whether matrix weighted ","code":""},{"path":"https://anespinosa.github.io/netmem/reference/redundancy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Redundancy measures — redundancy","text":"function returns redundancy, effective size efficincy measures (Burt, 1992).","code":""},{"path":"https://anespinosa.github.io/netmem/reference/redundancy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Redundancy measures — redundancy","text":"Burt, R.S., 1992. Structural Holes: Social Structure Competition. Harvard University Press, Cambridge. Borgatti, S., 1997. Unpacking Burt's redundancy measure. Connections, 20(1): 35-38. doi: http://www.analytictech.com/connections/v20(1)/holes.htm","code":""},{"path":"https://anespinosa.github.io/netmem/reference/redundancy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Redundancy measures — redundancy","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/redundancy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Redundancy measures — redundancy","text":"","code":"A <- matrix(c(   0, 1, 0, 0, 1, 1, 1,   1, 0, 0, 1, 0, 0, 1,   0, 0, 0, 0, 0, 0, 1,   0, 1, 0, 0, 0, 0, 1,   1, 0, 0, 0, 0, 0, 1,   1, 0, 0, 0, 0, 0, 1,   1, 1, 1, 1, 1, 1, 0 ), ncol = 7, byrow = TRUE) rownames(A) <- letters[1:nrow(A)] colnames(A) <- letters[1:ncol(A)] redundancy(A, ego = \"g\") #> $redundancy #> [1] 1.333333 #>  #> $effective_size #> [1] 4.666667 #>  #> $efficiency #> [1] 0.7777778 #>"},{"path":"https://anespinosa.github.io/netmem/reference/shared_partners.html","id":null,"dir":"Reference","previous_headings":"","what":"Shared partners — shared_partners","title":"Shared partners — shared_partners","text":"Shared partners","code":""},{"path":"https://anespinosa.github.io/netmem/reference/shared_partners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shared partners — shared_partners","text":"","code":"shared_partners(   A,   loops = FALSE,   directed = TRUE,   type = c(\"dsp\", \"esp\", \"nsp\") )"},{"path":"https://anespinosa.github.io/netmem/reference/shared_partners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shared partners — shared_partners","text":"binary matrix loops Whether consider loops directed Whether matrix directed type Whether return dyad-wise (dsp) (default), edge-wise (esp) non-edgewise (nsp) shared partners (Hunter Handcock, 2006)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/shared_partners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shared partners — shared_partners","text":"function return distribution shared partners.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/shared_partners.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shared partners — shared_partners","text":"Hunter, D. R. M. S. Handcock (2006), Inference curved exponential family models networks, Journal Computational Graphical Statistics, 15: 565– 583.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/shared_partners.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shared partners — shared_partners","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/shared_partners.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shared partners — shared_partners","text":"","code":"A <- matrix(c(   0, 1, 0, 0, 0, 0,   1, 0, 1, 1, 0, 1,   0, 1, 0, 1, 0, 0,   0, 1, 1, 0, 1, 1,   0, 0, 0, 1, 0, 1,   0, 1, 0, 1, 1, 0 ), byrow = TRUE, ncol = 6) shared_partners(A, type = \"dsp\") #> dsp #>  0  1  2  #>  4 18  8  shared_partners(A, type = \"esp\") #>  #>  0  1  2  #>  2 10  4  shared_partners(A, type = \"nsp\") #> nsp #> 0 1 2  #> 2 8 4"},{"path":"https://anespinosa.github.io/netmem/reference/simplicial_complexes.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplicial complexes — simplicial_complexes","title":"Simplicial complexes — simplicial_complexes","text":"incidence matrix simplexes cliques","code":""},{"path":"https://anespinosa.github.io/netmem/reference/simplicial_complexes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplicial complexes — simplicial_complexes","text":"","code":"simplicial_complexes(A, zero_simplex = FALSE, projection = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/simplicial_complexes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplicial complexes — simplicial_complexes","text":"symmetric matrix object. zero_simplex Whether include zero simple. projection Whether return links actors (.e., rows) shared linking events (.e., columns).","code":""},{"path":"https://anespinosa.github.io/netmem/reference/simplicial_complexes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplicial complexes — simplicial_complexes","text":"function return incidence matrix actors participating simplices simplicial complexes","code":""},{"path":"https://anespinosa.github.io/netmem/reference/simplicial_complexes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simplicial complexes — simplicial_complexes","text":"Atkin, R. H. (1974). Mathematical structure human affairs. New York: Crane, Rusak. Freeman, L. C. (1980). Q-analysis structure friendship networks. International Journal Man-Machine Studies, 12(4), 367–378. https://doi.org/10.1016/S0020-7373(80)80021-6 Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/simplicial_complexes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simplicial complexes — simplicial_complexes","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/simplicial_complexes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplicial complexes — simplicial_complexes","text":"","code":"A <- matrix(c(   0, 1, 1, 0, 0, 0, 0, 1, 0,   1, 0, 1, 0, 0, 0, 0, 0, 0,   1, 1, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 1, 1, 0, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0, 0,   0, 0, 0, 1, 0, 0, 1, 1, 0,   0, 0, 0, 0, 0, 1, 0, 1, 0,   1, 0, 0, 0, 0, 1, 1, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0 ), byrow = TRUE, ncol = 9) rownames(A) <- letters[1:nrow(A)] colnames(A) <- rownames(A) simplicial_complexes(A, zero_simplex = FALSE) #>   1 2 3 4 5 6 7 8 9 10 11 #> a 1 0 0 0 1 1 1 0 0  0  0 #> b 1 0 0 0 1 0 0 1 0  0  0 #> c 1 0 0 0 0 1 0 1 0  0  0 #> d 0 0 0 0 0 0 0 0 1  1  0 #> e 0 0 0 0 0 0 0 0 1  0  0 #> f 0 1 0 1 0 0 0 0 0  1  1 #> g 0 0 1 1 0 0 0 0 0  0  1 #> h 0 1 1 1 0 0 1 0 0  0  0"},{"path":"https://anespinosa.github.io/netmem/reference/spatial_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial autocorrelation — spatial_cor","title":"Spatial autocorrelation — spatial_cor","text":"function calculate spatial autocorrelations sample networks different orders (distances).","code":""},{"path":"https://anespinosa.github.io/netmem/reference/spatial_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial autocorrelation — spatial_cor","text":"","code":"spatial_cor(   A,   V,   measures = c(\"covariance\", \"correlation\", \"moran\", \"geary\"),   mean = TRUE,   diag = FALSE,   distance1 = TRUE,   rowstand = FALSE,   scale = FALSE )"},{"path":"https://anespinosa.github.io/netmem/reference/spatial_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial autocorrelation — spatial_cor","text":"symmetric matrix V vector measures Whether use Covariance covariance (default), Correlation correlation, Moran moran Geary's C geary mean Whether use mean vector measures diag Whether consider diagonal matrix measures distance1 Whether return spatial autocorrelation considering actor distance 1 rowstand Whether use row-standardization estimate Moran (Anselin, 1995) scale Whether scale Moran (Anselin, 1995)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/spatial_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial autocorrelation — spatial_cor","text":"function return global spatial autocorrelation. Multiple orders can also computed.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/spatial_cor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spatial autocorrelation — spatial_cor","text":"Anselin, L. (1995). Local indicators spatial association—LISA. Geographical analysis, 27(2), 93-115. Geary, R.C. (1954). “Contiguity Ratio Statistical Mapping.” Incorporated Statistician, 5: 115-145. Moran, P..P. (1950). “Notes Continuous Stochastic Phenomena.” Biometrika, 37: 17-23.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/spatial_cor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial autocorrelation — spatial_cor","text":"","code":"A <- matrix(c(   0, 0, 1, 1,   0, 0, 1, 0,   1, 0, 0, 0,   1, 0, 1, 0 ), byrow = TRUE, ncol = 4) V <- c(2, 2, 1, 1)  spatial_cor(A, V, measures = c(\"moran\")) #> [1] -0.6666667"},{"path":"https://anespinosa.github.io/netmem/reference/struc_balance.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural balance — struc_balance","title":"Structural balance — struc_balance","text":"Structural balance","code":""},{"path":"https://anespinosa.github.io/netmem/reference/struc_balance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural balance — struc_balance","text":"","code":"struc_balance(A, B = NULL, score = c(\"triangle\", \"walk\"))"},{"path":"https://anespinosa.github.io/netmem/reference/struc_balance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural balance — struc_balance","text":"signed symmetric matrix (.e., ties either -1, 0 1) B signed symmetric matrix considered negative ties (.e., ties either -1, 0 1) score Whether return triangle (default) walk balance score (Aref Wilson, 2017)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/struc_balance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural balance — struc_balance","text":"function return structural balance (Heider, 1940; Cartwright Harary, 1956). B used, matrix considered negative matrix positive matrix.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/struc_balance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Structural balance — struc_balance","text":"Aref, Samin Wilson, Mark C. (2017). Measuring partial balance signed networks. Journal Complex Networks, 6(4): 566-595. Cartwright, Dorwin, Harary, Frank (1956). Structural balance: generalization Heider's theory. Psychological review, 63(5), 277. Heider, Fritz (1946). Attitudes Cognitive Organization. Journal Psychology, 21: 107–112","code":""},{"path":"https://anespinosa.github.io/netmem/reference/struc_balance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Structural balance — struc_balance","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/struc_balance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural balance — struc_balance","text":"","code":"A <- matrix(c(   0, -1, -1, 0,   -1, 0, 1, 0,   -1, 1, 0, 0,   0, 0, 0, 0 ), byrow = TRUE, ncol = 4) rownames(A) <- letters[1:nrow(A)] colnames(A) <- rownames(A) struc_balance(A) #> $table #>   sign1 sign2 sign3 number balance #> 1    -1    -1     1      3     --+ #>  #> $balance_score #> [1] 1 #>"},{"path":"https://anespinosa.github.io/netmem/reference/structural_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural Missing Data — structural_na","title":"Structural Missing Data — structural_na","text":"Assign NA missing data matrices.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/structural_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural Missing Data — structural_na","text":"","code":"structural_na(   A,   label = NULL,   row_labels = NULL,   col_labels = NULL,   two_mode = FALSE )"},{"path":"https://anespinosa.github.io/netmem/reference/structural_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural Missing Data — structural_na","text":"incident symmetric matrix object. label string vector names theoretical complete matrix (used one-mode networks ). row_labels string vector names rows (used two-mode networks). col_labels string vector names columns (used two-mode networks). two_mode Boolean indicating whether matrix two-mode. Default FALSE.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/structural_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural Missing Data — structural_na","text":"function returns matrix NA assigned missing data.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/structural_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural Missing Data — structural_na","text":"","code":"# Example for one-mode network A <- matrix(c(   0, 1, 1,   1, 0, 1,   0, 0, 0 ), byrow = TRUE, ncol = 3) colnames(A) <- c(\"A\", \"C\", \"D\") rownames(A) <- c(\"A\", \"C\", \"D\") label <- c(\"A\", \"B\", \"C\", \"D\", \"E\") structural_na(A, label = label) #> Warning: Provided labels do not match the dimensions of the matrix. #>    A  B  C  D  E #> A  0 NA  1  1 NA #> B NA NA NA NA NA #> C  1 NA  0  1 NA #> D  0 NA  0  0 NA #> E NA NA NA NA NA  # Example for two-mode network B <- matrix(c(   0, 1, 0,   1, 0, 1,   0, 1, 0,   1, 0, 1 ), byrow = TRUE, ncol = 3) rownames(B) <- c(\"X1\", \"X2\", \"X3\", \"X4\") colnames(B) <- c(\"Y1\", \"Y2\", \"Y3\") rlabels <- c(\"X1\", \"X2\", \"X3\", \"X4\", \"X5\") clabels <- c(\"Y1\", \"Y2\", \"Y3\", \"Y4\") structural_na(B, row_labels = rlabels, col_labels = clabels, two_mode = TRUE) #>    Y1 Y2 Y3 Y4 #> X1  0  1  0 NA #> X2  1  0  1 NA #> X3  0  1  0 NA #> X4  1  0  1 NA #> X5 NA NA NA NA"},{"path":"https://anespinosa.github.io/netmem/reference/trans_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Transitivity — trans_coef","title":"Transitivity — trans_coef","text":"measure sometimes called clustering coefficient.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/trans_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transitivity — trans_coef","text":"","code":"trans_coef(   A,   method = c(\"weakcensus\", \"global\", \"mean\", \"local\"),   select = c(\"all\", \"in\", \"out\") )"},{"path":"https://anespinosa.github.io/netmem/reference/trans_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transitivity — trans_coef","text":"matrix method Whether calculate weakcensus, global transitivity ratio, mean transitivity local transitivity. select Whether consider , ties local transitivity.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/trans_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transitivity — trans_coef","text":"Return transitivity measure","code":""},{"path":"https://anespinosa.github.io/netmem/reference/trans_coef.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Transitivity — trans_coef","text":"Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/trans_coef.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transitivity — trans_coef","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/trans_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transitivity — trans_coef","text":"","code":"A <- matrix(c(   0, 1, 0, 1, 0,   1, 0, 1, 1, 0,   0, 1, 0, 0, 0,   1, 1, 0, 0, 1,   0, 0, 0, 1, 0 ), byrow = TRUE, ncol = 5) rownames(A) <- letters[1:ncol(A)] colnames(A) <- rownames(A)  trans_coef(A, method = \"local\") #> $a #> [1] 1 #>  #> $b #> [1] 0.3333333 #>  #> $c #> [1] NaN #>  #> $d #> [1] 0.3333333 #>  #> $e #> [1] NaN #>"},{"path":"https://anespinosa.github.io/netmem/reference/trans_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Transitivity matrix — trans_matrix","title":"Transitivity matrix — trans_matrix","text":"function assigns one elements matrix group actors part transitivity structure (030T label considering MAN triad census)","code":""},{"path":"https://anespinosa.github.io/netmem/reference/trans_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transitivity matrix — trans_matrix","text":"","code":"trans_matrix(A, loops = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/trans_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transitivity matrix — trans_matrix","text":"matrix loops Whether expect nonzero elements diagonal matrix","code":""},{"path":"https://anespinosa.github.io/netmem/reference/trans_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transitivity matrix — trans_matrix","text":"vector assigning id components nodes matrix belongs","code":""},{"path":"https://anespinosa.github.io/netmem/reference/trans_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Transitivity matrix — trans_matrix","text":"Davis, J.. Leinhardt, S. (1972). “Structure Positive Interpersonal Relations Small Groups.” J. Berger (Ed.), Sociological Theories Progress, Vol. 2, 218-251. Boston: Houghton Mifflin. Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/trans_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transitivity matrix — trans_matrix","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/trans_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transitivity matrix — trans_matrix","text":"","code":"A <- matrix(   c(     0, 1, 1, 0, 0, 0,     0, 0, 1, 0, 0, 0,     0, 0, 0, 1, 0, 0,     0, 0, 0, 0, 0, 0,     0, 0, 1, 1, 0, 0,     0, 0, 0, 0, 0, 0   ),   byrow = TRUE, ncol = 6 ) rownames(A) <- letters[1:NROW(A)] colnames(A) <- rownames(A) trans_matrix(A, loops = TRUE) #>   a b c d e f #> a 1 1 1 0 0 0 #> b 1 1 1 0 0 0 #> c 1 1 1 1 1 0 #> d 0 0 1 1 1 0 #> e 0 0 1 1 1 0 #> f 0 0 0 0 0 0"},{"path":"https://anespinosa.github.io/netmem/reference/triad_uman.html","id":null,"dir":"Reference","previous_headings":"","what":"Triad census analysis assuming U|MAN — triad_uman","title":"Triad census analysis assuming U|MAN — triad_uman","text":"Considering triad census Davis Leinhardt (1972) vector , B, C:","code":""},{"path":"https://anespinosa.github.io/netmem/reference/triad_uman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triad census analysis assuming U|MAN — triad_uman","text":"","code":"triad_uman(A, ztest = FALSE, covar = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/triad_uman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triad census analysis assuming U|MAN — triad_uman","text":"symmetric matrix object ztest Return Z p-value covar Return covarianc matrix triadic analysis","code":""},{"path":"https://anespinosa.github.io/netmem/reference/triad_uman.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triad census analysis assuming U|MAN — triad_uman","text":"function gives counts triad census, expected counts, assuming U|MAN distribution (Holland Leinhardt, 1975, 1976) operating, standard deviations counts.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/triad_uman.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Triad census analysis assuming U|MAN — triad_uman","text":"003 = ,B,C, empty triad 012 = -> B, C, triad single directed edge 102 = <-> B, C, triad reciprocated connection two vertices 021D = <-B-> C, triadic -star 021U = -> B <- C triadic -star 021C = -> B-> C, directed line 111D = <-> B <-C 111U = <-> B-> C 030T = -> B <-C, -> C 030C = <-B <-C, -> C 201 = <-> B <-> C 120D = <-B-> C, <-> C 120U = -> B <-C, <->C 120C = -> B-> C, <-> C 210 = -> B <-> C, <-> C 300 = <-> B <-> C, <->C,  complete triad.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/triad_uman.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Triad census analysis assuming U|MAN — triad_uman","text":"Davis, J.. Leinhardt, S. (1972). Structure Positive Interpersonal Relations Small Groups. J. Berger (Ed.), Sociological Theories Progress, Volume 2, 218-251. Boston: Houghton Mifflin. Holland, P. W. Leinhardt, S. (1975). statistical analysis local structure social networks. D. R. Heise (Ed.), Sociological Methodology, 1976 (Jossey-Bass, pp. 1–45). Holland, P. W. Leinhardt, S. (1976). Local Structure Social Networks. Sociological Methodology, 7, 1–45.  doi: https://doi.org/10.2307/270703 Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/triad_uman.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Triad census analysis assuming U|MAN — triad_uman","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/triad_uman.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Triad census analysis assuming U|MAN — triad_uman","text":"","code":"data(krackhardt_friends) triad_uman(krackhardt_friends) #>    label OBS     EXP     VAR    STD #> 1    003 376 320.057  88.239  9.394 #> 2    012 366 416.818 211.856 14.555 #> 3    102 143 171.193  88.921  9.430 #> 4   021D 114  44.087  38.736  6.224 #> 5   021U  34  44.087  38.736  6.224 #> 6   021C  35  88.173  66.770  8.171 #> 7   111D  39  73.745  60.470  7.776 #> 8   111U 101  73.745  60.470  7.776 #> 9   030T  23  18.173  14.902  3.860 #> 10  030C   0   6.058   5.694  2.386 #> 11   201  20  28.971  20.471  4.524 #> 12  120D  16   7.740   7.359  2.713 #> 13  120U  25   7.740   7.359  2.713 #> 14  120C   9  15.481  13.957  3.736 #> 15   210  23  12.385  10.534  3.246 #> 16   300   6   1.548   1.441  1.200 if (FALSE) { # \\dontrun{ triad_uman(krackhardt_friends, ztest = TRUE, covar = TRUE) } # }"},{"path":"https://anespinosa.github.io/netmem/reference/z_arctest.html","id":null,"dir":"Reference","previous_headings":"","what":"Z test of the number of arcs — z_arctest","title":"Z test of the number of arcs — z_arctest","text":"Z test number arcs","code":""},{"path":"https://anespinosa.github.io/netmem/reference/z_arctest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Z test of the number of arcs — z_arctest","text":"","code":"z_arctest(G, p = 0.5, interval = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/z_arctest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Z test of the number of arcs — z_arctest","text":"G symmetric matrix object. p Constant probability p. interval Return 95 percent confidence interval.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/z_arctest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Z test of the number of arcs — z_arctest","text":"function gives Z test p-value number lines arcs present directed graph","code":""},{"path":"https://anespinosa.github.io/netmem/reference/z_arctest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Z test of the number of arcs — z_arctest","text":"Wasserman, S. Faust, K. (1994). Social network analysis: Methods applications. Cambridge University Press.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/z_arctest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Z test of the number of arcs — z_arctest","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/z_arctest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Z test of the number of arcs — z_arctest","text":"","code":"data(krackhardt_friends) z_arctest(krackhardt_friends) #>      z      p  #> -10.54   0.00"},{"path":"https://anespinosa.github.io/netmem/reference/zone_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Zone-2 sampling from second-mode — zone_sample","title":"Zone-2 sampling from second-mode — zone_sample","text":"Second-zone multilevel sampling considering second-mode focal actor","code":""},{"path":"https://anespinosa.github.io/netmem/reference/zone_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zone-2 sampling from second-mode — zone_sample","text":"","code":"zone_sample(A, X, ego = TRUE, core = FALSE)"},{"path":"https://anespinosa.github.io/netmem/reference/zone_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zone-2 sampling from second-mode — zone_sample","text":"symmetric matrix object. X X incidence matrix object. ego Whether add ego subgraph. core Whether add actors distance one ego","code":""},{"path":"https://anespinosa.github.io/netmem/reference/zone_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zone-2 sampling from second-mode — zone_sample","text":"function return list second-zone subgraphs using focal actor second-mode multilevel network.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/zone_sample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Zone-2 sampling from second-mode — zone_sample","text":"Espinosa-Rada, . (2021). Network Approach Sociological Study Science: Modelling Dynamic Multilevel Networks. [PhD](https://research.manchester.ac.uk/en/studentTheses/-network-approach---sociological-study--science--know). University Manchester.","code":""},{"path":"https://anespinosa.github.io/netmem/reference/zone_sample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Zone-2 sampling from second-mode — zone_sample","text":"Alejandro Espinosa-Rada","code":""},{"path":"https://anespinosa.github.io/netmem/reference/zone_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zone-2 sampling from second-mode — zone_sample","text":"","code":"A <- matrix(c(   0, 1, 0, 0, 0, 0, 0, 0,   0, 0, 1, 0, 0, 0, 0, 0,   0, 1, 0, 1, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 1, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0 ), byrow = TRUE, ncol = 8) colnames(A) <- c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\") rownames(A) <- c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\")  X <- matrix(c(   1, 0, 0, 0,   1, 0, 0, 0,   1, 0, 1, 0,   0, 1, 1, 0,   0, 1, 1, 1,   0, 1, 0, 0,   0, 0, 0, 0,   0, 0, 0, 1 ), byrow = TRUE, ncol = 4) colnames(X) <- c(\"a\", \"b\", \"c\", \"d\") rownames(X) <- c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\")  set.seed(18051889) zone_sample(A, X, core = TRUE) #> $a #> IGRAPH cc9a1c1 DN-- 7 16 --  #> + attr: name (v/c), core (v/n) #> + edges from cc9a1c1 (vertex names): #>  [1] 1->2 1->a 2->3 2->a 3->2 3->4 3->a 3->c 4->b 4->c a->1 a->2 a->3 b->4 c->3 #> [16] c->4 #>  #> $b #> IGRAPH 7f396f2 DN-- 8 18 --  #> + attr: name (v/c), core (v/n) #> + edges from 7f396f2 (vertex names): #>  [1] 3->4 3->a 3->c 4->b 4->c 5->b 5->c 5->d 6->4 6->b a->3 b->4 b->5 b->6 c->3 #> [16] c->4 c->5 d->5 #>  #> $c #> IGRAPH 7f0801e DN-- 9 22 --  #> + attr: name (v/c), core (v/n) #> + edges from 7f0801e (vertex names): #>  [1] 2->3 2->a 3->2 3->4 3->a 3->c 4->b 4->c 5->b 5->c 5->d 6->4 6->b a->2 a->3 #> [16] b->4 b->5 b->6 c->3 c->4 c->5 d->5 #>  #> $d #> IGRAPH 57d61fa DN-- 5 8 --  #> + attr: name (v/c), core (v/n) #> + edges from 57d61fa (vertex names): #> [1] 5->b 5->c 5->d 8->d b->5 c->5 d->5 d->8 #>"}]
