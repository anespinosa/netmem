#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/lattice.png")
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "Aller_Rg",
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#F2CB1C", #inside  bluesky: #EBF2FA
h_color="#4A3030", filename="man/figures/lattice.png") #blue: #064789
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "Aller_Rg",
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#F2CB1C", #inside  bluesky: #EBF2FA
h_color="#4A3030", filename="man/figures/logo.png") #blue: #064789
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "Aller_Rg",
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/logo2.png") #blue: #064789
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "Aller_Rg",
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/logo.png") #blue: #064789
?showtext
??showtext
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "gochi",
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/logo.png") #blue: #064789
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "sans", #Aller_Rg
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/logo.png") #blue: #064789
font_add_google("Gochi Hand", "gochi")
library(showtext)
font_add_google("Gochi Hand", "gochi")
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "gochi", #Aller_Rg
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/logo.png") #blue: #064789
font_add_google("Schoolbell", "bell")
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "bell", #Aller_Rg
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/logo.png") #blue: #064789
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "gochi", #Aller_Rg
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/logo.png") #blue: #064789
?font_add_google
font_add_google("Bebas Neue", "neue")
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "neue", #Aller_Rg
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/logo.png") #blue: #064789
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "gochi", #Aller_Rg
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/logo.png") #blue: #064789
font_add_google("Amatic SC", "amatic")
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "amatic", #Aller_Rg
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/logo.png") #blue: #064789
font_add_google("Fredoka One", "one")
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "one", #Aller_Rg
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/logo.png") #blue: #064789
font_add_google("Righteous", "right")
sticker(g, package="netmem",
p_size=10, #size text
p_x = 1, # x position text
p_y = 1.4, # y position text
p_color = "black", # colour text
p_family = "right", #Aller_Rg
#spotlight=TRUE,
url="https://github.com/anespinosa/netmem",
u_size=1.3,
s_x=1,  # x centering
s_y=0.8, # y centering
s_width=2,
s_height=1.5,
h_fill="#EBF2FA", #inside  bluesky: #EBF2FA
h_color="#064789", filename="man/figures/logo.png") #blue: #064789
library(netmem)
devtools::use_travis()
devtools::use_travis()
library(devtools)
devtools::use_travis()
devtools::use_travis()
devtools::use_travis()
devtools::has_devel()
gen_degree <- function(A,
weighted=FALSE, type="out",
normalized=FALSE, loops=TRUE,
digraph=TRUE,
alpha=0.5, bipartite=FALSE){
A <- as.matrix(A)
W <- A # weighted
A[A > 0] <- 1 # binary
n <- nrow(A)
if(!bipartite){
if(dim(A)[1]!=dim(A)[2])stop("Adjacency matrix should be square")
if(digraph){
if(all(A[lower.tri(A)] == t(A)[lower.tri(A)]))warning("The network is undirected")
}
if(!digraph){
if(type=="all")warning("For undirected networks it should be prefered type `out` that is equal to `in`")
A[lower.tri(A)] = t(A)[lower.tri(A)] # Symmetrize
}
if(!loops){diag(A) <- 0}
if(type=="in"){
#deg <- diag(t(A) %*% A) # indegree # colSums(A, na.rm=TRUE)
deg <- colSums(A, na.rm=TRUE)
}
if(type=="out"){
deg <- diag(A %*% t(A)) # outdegree # rowSums(A, na.rm=TRUE)
deg <- rowSums(A, na.rm=TRUE)
}
if(type=="all"){
#deg <- diag(A %*% t(A))+diag(t(A) %*% A)
deg <- colSums(A, na.rm=TRUE)+rowSums(A, na.rm=TRUE)
}
if(weighted){
if(type=="in"){
#si <- diag(t(W) %*% W)
si <- colSums(W, na.rm=TRUE)
}
if(type=="out"){
#si <- diag(W %*% t(W))
si <- rowSums(W, na.rm=TRUE)
}
if(type=="all"){
#si <- diag(W %*% t(W))+diag(t(W) %*% W) # Freeman
si <- colSums(W, na.rm=TRUE)+rowSums(W, na.rm=TRUE)
}
deg <- (deg^(1-alpha))*(si^(alpha)) # opsahl
}
if(normalized){
deg <- deg/(n-1)
}
if(normalized & weighted){
stop("The normalized values should only be used for binary data")
}
}
### BIPARTITE
if(bipartite){
m <- ncol(A) # level 1
if(dim(A)[1]==dim(A)[2])warning("Incident matrix should be rectangular")
deg1 <- diag(A %*% t(A)) # level 1
deg2 <- diag(t(A) %*% A) # level 2
if(normalized){
deg1 <- deg1/m
deg2 <- deg2/n # BORGATII & EVERETT 1997
}
if(normalized & weighted){
stop("The normalized values should only be used for binary data")
}
deg <- list(bipartiteL1=deg1, bipartiteL2=deg2)
}
return(deg)
}
gen_degree <- function(A,
weighted=FALSE, type="out",
normalized=FALSE, loops=TRUE,
digraph=TRUE,
alpha=0.5, bipartite=FALSE){
A <- as.matrix(A)
W <- A # weighted
A[A > 0] <- 1 # binary
n <- nrow(A)
if(!bipartite){
if(dim(A)[1]!=dim(A)[2])stop("Adjacency matrix should be square")
if(digraph){
if(all(A[lower.tri(A)] == t(A)[lower.tri(A)]))warning("The network is undirected")
}
if(!digraph){
if(type=="all")warning("For undirected networks it should be prefered type `out` that is equal to `in`")
A[lower.tri(A)] = t(A)[lower.tri(A)] # Symmetrize
}
if(!loops){diag(A) <- 0}
if(type=="in"){
#deg <- diag(t(A) %*% A) # indegree # colSums(A, na.rm=TRUE)
deg <- colSums(A, na.rm=TRUE)
}
if(type=="out"){
deg <- diag(A %*% t(A)) # outdegree # rowSums(A, na.rm=TRUE)
deg <- rowSums(A, na.rm=TRUE)
}
if(type=="all"){
#deg <- diag(A %*% t(A))+diag(t(A) %*% A)
deg <- colSums(A, na.rm=TRUE)+rowSums(A, na.rm=TRUE)
}
if(weighted){
if(type=="in"){
#si <- diag(t(W) %*% W)
si <- colSums(W, na.rm=TRUE)
}
if(type=="out"){
#si <- diag(W %*% t(W))
si <- rowSums(W, na.rm=TRUE)
}
if(type=="all"){
#si <- diag(W %*% t(W))+diag(t(W) %*% W) # Freeman
si <- colSums(W, na.rm=TRUE)+rowSums(W, na.rm=TRUE)
}
deg <- (deg^(1-alpha))*(si^(alpha)) # opsahl
}
if(normalized){
deg <- deg/(n-1)
}
if(normalized & weighted){
stop("The normalized values should only be used for binary data")
}
}
### BIPARTITE
if(bipartite){
m <- ncol(A) # level 1
if(dim(A)[1]==dim(A)[2])warning("Incident matrix should be rectangular")
deg1 <- diag(A %*% t(A)) # level 1
deg2 <- diag(t(A) %*% A) # level 2
if(normalized){
deg1 <- deg1/m
deg2 <- deg2/n # BORGATII & EVERETT 1997
}
if(normalized & weighted){
stop("The normalized values should only be used for binary data")
}
deg <- list(bipartiteL1=deg1, bipartiteL2=deg2)
}
return(deg)
}
library(usethis)
use_travis()
R
version
library(netmem)
use_appveyor()
use_coverage()
library(netmem)
llibrary(tester)
library(tester)
usethis::use_testthat()
A3 <- matrix(c(0,4,4,0,0,0,
4,0,2,1,1,0,
4,2,0,0,0,0,
0,1,0,0,0,0,
0,1,0,0,0,7,
0,0,0,0,7,0), byrow=TRUE, ncol=6)
gen_degree(A3, digraph = FALSE, weighted=TRUE)
gen  <- gen_degree(A3, digraph = FALSE, weighted=TRUE)
gen[1]
?test_that
test_that("Wheter degree give us the results of the paper", {
A3 <- matrix(c(0,4,4,0,0,0,
4,0,2,1,1,0,
4,2,0,0,0,0,
0,1,0,0,0,0,
0,1,0,0,0,7,
0,0,0,0,7,0), byrow=TRUE, ncol=6)
gen  <- gen_degree(A3, digraph = FALSE, weighted=TRUE)
expect_equal(gen[1], 4)
})
library(testthat)
test_that("Wheter degree give us the results of the paper", {
A3 <- matrix(c(0,4,4,0,0,0,
4,0,2,1,1,0,
4,2,0,0,0,0,
0,1,0,0,0,0,
0,1,0,0,0,7,
0,0,0,0,7,0), byrow=TRUE, ncol=6)
gen  <- gen_degree(A3, digraph = FALSE, weighted=TRUE)
expect_equal(gen[1], 4)
})
gen_degree(A3, digraph = FALSE, weighted=TRUE)
dput(gen_degree(A3, digraph = FALSE, weighted=TRUE))
test_that("Wheter degree give us the results of the paper", {
A3 <- matrix(c(0,4,4,0,0,0,
4,0,2,1,1,0,
4,2,0,0,0,0,
0,1,0,0,0,0,
0,1,0,0,0,7,
0,0,0,0,7,0), byrow=TRUE, ncol=6)
gen  <- gen_degree(A3, digraph = FALSE, weighted=TRUE)
expect_equal(gen[1], c(4, 5.65685424949238, 3.46410161513775, 1, 4, 2.64575131106459
))
})
covr::package_coverage(type="all")
library(usethis)
use_data_raw()
?use_data
krackhardt_friends <- matrix(c(0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,
1,1,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,
0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,1,1,0,
0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,1,0,
1,1,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,0,0,1,0,
1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,
0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,
1,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,
1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,1,1,0,1,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,
0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
ncol=21, byrow=TRUE)
usethis::use_data(krackhardt_friends, compress = "xz")
library(netmem)
library(netmem)
library(netmem)
krackhardt_friends
library(netmem)
?use_data
install.packages("pkgdown")
usethis::use_pkgdown()
usethis::use_git()
pkgdown::build_site()
pkgdown::build_site()
library(netmem)
?use_git
??use_git
pkgdown:::build_site_external()
library(netmem)
travis::use_travis_deploy()
usethis::use_pkgdown_travis()
library(netmem)
usethis::use_pkgdown()
pkgdown::build_site()
library(netmem)
?build_site
library(netmem)
library(netmem)
library(netmem)
library(netmem)
library(netmem)
pkgdown:::build_site_external()
readLines(con)
pkgdown:::build_site_external()
usethis::use_pkgdown()
pkgdown::build_site()
install.packages("pkgdown")
install.packages("pkgdown")
pkgdown:::build_site_external()
pkgdown::build_site()
pkgdown::build_site_external()
pkgdown:::build_site_external()
pkgdown::build_site()
pkgdown:::build_site_external()
library(netmem)
library(netmem)
pkgdown:::build_site_external()
pkgdown::build_site()
library(netmem)
library(netmem)
before_install: R -e 'source("https://install-github.me/r-lib/remotes")'
R -e 'source("https://install-github.me/r-lib/remotes")'
installed.packages("remote")
installed.packages("remotes")
source("https://install-github.me/r-lib/remotes")
